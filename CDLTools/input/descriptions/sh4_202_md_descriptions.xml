<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<features>
  <feature>
   <id>CYGPKG_REDBOOT_SH_OPTIONS</id>
   <description>This option lists the target's requirements for a valid Redboot configuration. </description>
  </feature>
  <feature>
   <id>CYGSEM_REDBOOT_SH_LINUX_BOOT</id>
   <description>This option enables RedBoot to support booting of a Linux kernel. </description>
  </feature>
  <feature>
   <id>CYGBLD_GLOBAL_OPTIONS</id>
   <description>Global build options including control over compiler flags, linker flags and choice of toolchain. </description>
  </feature>
  <feature>
   <id>CYGBLD_GLOBAL_COMMAND_PREFIX</id>
   <description>This option specifies the command prefix used when invoking the build tools. </description>
  </feature>
  <feature>
   <id>CYGBLD_GLOBAL_CFLAGS</id>
   <description>This option controls the global compiler flags which are used to compile all packages by default. Individual packages may define options which override these global flags. </description>
  </feature>
  <feature>
   <id>CYGBLD_GLOBAL_LDFLAGS</id>
   <description>This option controls the global linker flags. Individual packages may define options which override these global flags. </description>
  </feature>
  <feature>
   <id>CYGBLD_BUILD_GDB_STUBS</id>
   <description>This option enables the building of the GDB stubs for the board. The common HAL controls takes care of most of the build process, but the final conversion from ELF image to binary data is handled by the platform CDL, allowing relocation of the data if necessary. </description>
  </feature>
  <feature>
   <id>CYGBLD_BUILD_COMMON_GDB_STUBS</id>
   <description>Unless a target board has specific requirements to the stub implementation, it can use a simple common stub. This option, which gets enabled by platform HALs as appropriate, controls the building of the common stub. </description>
  </feature>
  <feature>
   <id>CYGBLD_GLOBAL_WARNFLAGS</id>
   <description>This option specifies the default warning-related compiler flags used on all eCos platforms. </description>
  </feature>
  <feature>
   <id>CYGPKG_REDBOOT_HAL_OPTIONS</id>
   <description>This option lists the target's requirements for a valid Redboot configuration. </description>
  </feature>
  <feature>
   <id>CYGBLD_BUILD_REDBOOT_BIN</id>
   <description>This option enables the conversion of the Redboot ELF image to a binary image suitable for ROM programming. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL</id>
   <description>The eCos HAL package provide a porting layer for higher-level parts of the system such as the kernel and the C library. Each installation should have HAL packages for one or more architectures, and for each architecture there may be one or more supported platforms. It is necessary to select one target architecture and one platform for that architecture. There are also a number of configuration options that are common to all HAL packages. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_COMMON</id>
   <description>A number of configuration options are common to most or all HAL packages, for example options controlling how much state should be saved during a context switch. The implementations of these options will vary from architecture to architecture. </description>
  </feature>
  <feature>
   <id>CYGFUN_HAL_COMMON_KERNEL_SUPPORT</id>
   <description>The HAL can be configured to either support the full eCos kernel, or to support only very simple applications which do not require a full kernel. If kernel support is not required then some of the startup, exception, and interrupt handling code can be eliminated. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_EXCEPTIONS</id>
   <description>When a processor exception occurs, for example an attempt to execute an illegal instruction or to perform a divide by zero, this exception may be handled in a number of different ways. If the target system has gdb support then typically the exception will be handled by gdb code. Otherwise if the HAL exception support is enabled then the HAL will invoke a routine deliver_exception(). Typically this routine will be provided by the eCos kernel, but it is possible for application code to provide its own implementation. If the HAL exception support is not enabled and a processor exception occurs then the behaviour of the system is undefined. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_STOP_CONSTRUCTORS_ON_FLAG</id>
   <description>This option supports environments where some constructors must be run in the context of a thread rather than at simple system startup time. A boolean flag named cyg_hal_stop_constructors is set to 1 when constructors should no longer be invoked. It is up to some other package to deal with the rest of the constructors. In the current version this is only possible with the C library. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_INSTALL_MMU_TABLES</id>
   <description>This option controls whether this application installs its own Memory Management Unit (MMU) tables, or relies on the existing environment to run. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_STATIC_MMU_TABLES</id>
   <description>This option defines an environment where any Memory Management Unit (MMU) tables are constant. Normally used by ROM based environments, this provides a way to save RAM usage which would otherwise be required for these tables. </description>
  </feature>
  <feature>
   <id>CYGDBG_HAL_DIAG_TO_DEBUG_CHAN</id>
   <description>If not inheriting the console setup from the ROM monitor, it is possible to redirect diagnostic output to the debug channel by enabling this option. Depending on the debugger used it may also be necessary to select a mangler for the output to be displayed by the debugger. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_DIAG_MANGLER</id>
   <description>It is sometimes necessary to mangle (encode) the diag ASCII text output in order for it to show up at the other end. In particular, GDB may silently ignore raw ASCII text. </description>
  </feature>
  <feature>
   <id>CYGBLD_HAL_LINKER_GROUPED_LIBS</id>
   <description>This option provides a list of libraries used to satisfy linker dependencies, but necessary for building eCos. It is passed to a GROUP() directive in the linker script, which is analogous to using the "-(" aka "--start-group", and "-)" aka "--end-group" options on the linker command line. It provides a similar function to adding "-llibname" to the linker, but with the added feature that each library in the group is scanned in turn for unresolved symbols, and this process is repeated until there are no more unresolved symbols. This is important for system libraries as there are often mutual dependencies. This option should not be used for adding application specific libraries. That should be done in the application's own makefile or link line. Users wishing to use the GNU Compiler prior to GCC 3.0 will need to remove libsupc++.a from this option. Note that libtarget.a is always required to build eCos. </description>
  </feature>
  <feature>
   <id>CYGBLD_HAL_LINKER_GROUPED_LIBS_DEFAULT</id>
   <description>This option is intended to be used by other eCos packages (including HAL packages) to provide a different default value for CYGBLD_HAL_LINKER_GROUPED_LIBS. This is separated into its own option to continue to allow the user to make customisations to the grouped library list. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_COMMON_INTERRUPTS</id>
   <description>A number of configuration options related to interrupt handling are common to most or all HAL packages, even though the implementations will vary from architecture to architecture. </description>
  </feature>
  <feature>
   <id>CYGIMP_HAL_COMMON_INTERRUPTS_USE_INTERRUPT_STACK</id>
   <description>When an interrupt occurs this interrupt can be handled either on the current stack or on a separate stack maintained by the HAL. Using a separate stack requires a small number of extra instructions in the interrupt handling code, but it has the advantage that it is no longer necessary to allow extra space in every thread stack for the interrupt handlers. The amount of extra space required depends on the interrupt handlers that are being used. </description>
  </feature>
  <feature>
   <id>CYGNUM_HAL_COMMON_INTERRUPTS_STACK_SIZE</id>
   <description>This configuration option specifies the stack size in bytes for the interrupt stack. Typically this should be a multiple of 16, but the exact requirements will vary from architecture to architecture. The interrupt stack serves two separate purposes. It is used as the stack during system initialization. In addition, if the interrupt system is configured to use a separate stack then all interrupts will be processed on this stack. The exact memory requirements will vary from application to application, and will depend heavily on whether or not other interrupt-related options, for example nested interrupts, are enabled. On most targets, in a configuration with no kernel this stack will also be the stack used to invoke the application, and must obviously be appropriately large in that case. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_COMMON_INTERRUPTS_ALLOW_NESTING</id>
   <description>When an interrupt occurs the HAL interrupt handling code can either leave interrupts disabled for the duration of the interrupt handling code, or by doing some extra work it can reenable interrupts before invoking the interrupt handler and thus allow nested interrupts to happen. If all the interrupt handlers being used are small and do not involve any loops then it is usually better to disallow nested interrupts. However if any of the interrupt handlers are more complicated than nested interrupts will usually be required. </description>
  </feature>
  <feature>
   <id>CYGDBG_HAL_COMMON_INTERRUPTS_SAVE_MINIMUM_CONTEXT</id>
   <description>The HAL interrupt handling code can exploit the calling conventions defined for a given architecture to reduce the amount of state that has to be saved. Generally this improves performance and reduces code size. However it can make source-level debugging more difficult. </description>
  </feature>
  <feature>
   <id>CYGIMP_HAL_COMMON_INTERRUPTS_CHAIN</id>
   <description>Interrupts can be attached to vectors either singly, or be chained together. The latter is necessary if there is no way of discovering which device has interrupted without inspecting the device itself. It can also reduce the amount of RAM needed for interrupt decoding tables and code. </description>
  </feature>
  <feature>
   <id>CYGIMP_HAL_COMMON_INTERRUPTS_IGNORE_SPURIOUS</id>
   <description>On some hardware, interrupt sources may not be de-bounced or de-glitched. Rather than try to handle these interrupts (no handling may be possible), this option allows the HAL to simply ignore them. In most cases, if the interrupt is real it will reoccur in a detectable form. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_COMMON_CONTEXT</id>
   <description>A number of configuration options related to thread contexts are common to most or all HAL packages, even though the implementations will vary from architecture to architecture. </description>
  </feature>
  <feature>
   <id>CYGDBG_HAL_COMMON_CONTEXT_SAVE_MINIMUM</id>
   <description>The thread context switch code can exploit the calling conventions defined for a given architecture to reduce the amount of state that has to be saved during a context switch. Generally this improves performance and reduces code size. However it can make source-level debugging more difficult. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_CACHE_CONTROL</id>
   <description>These options let the default behaviour of the caches be easily configurable. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_ENABLE_DCACHE_ON_STARTUP</id>
   <description>Enabling this option will cause the data cache to be enabled as soon as practicable when eCos starts up. One would choose to disable this if the data cache cannot safely be turned on, such as a case where the cache(s) require additional platform specific setup. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_DCACHE_STARTUP_MODE</id>
   <description>This option controls the mode the cache will be set to when enabled on startup. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_ENABLE_ICACHE_ON_STARTUP</id>
   <description>Enabling this option will cause the instruction cache to be enabled as soon as practicable when eCos starts up. One would choose to disable this if the instruction cache cannot safely be turned on, such as a case where the cache(s) require additional platform specific setup. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_DEBUG</id>
   <description>If the source level debugger gdb is to be used for debugging application code then it may be necessary to configure in support for this in the HAL. </description>
  </feature>
  <feature>
   <id>CYGINT_HAL_DEBUG_GDB_STUBS</id>
   <description>The HAL implements GDB stubs for the target. </description>
  </feature>
  <feature>
   <id>CYGDBG_HAL_DEBUG_GDB_INCLUDE_STUBS</id>
   <description>This option causes a set of GDB stubs to be included into the system. On some target systems the GDB support will be provided by other means, for example by a ROM monitor. On other targets, especially when building a ROM-booting system, the necessary support has to go into the target library itself. When GDB stubs are include in a configuration, HAL serial drivers must also be included. </description>
  </feature>
  <feature>
   <id>CYGINT_HAL_DEBUG_GDB_STUBS_BREAK</id>
   <description>The HAL implements external break (or asynchronous interrupt) in the GDB stubs for the target. </description>
  </feature>
  <feature>
   <id>CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT</id>
   <description>This option causes the GDB stub to add a serial interrupt handler which will listen for GDB break packets. This lets you stop the target asynchronously when using GDB, usually by hitting Control+C or pressing the STOP button. This option differs from CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT in that it is used when GDB stubs are present. </description>
  </feature>
  <feature>
   <id>CYGDBG_HAL_DEBUG_GDB_CTRLC_SUPPORT</id>
   <description>This option adds an interrupt handler for the GDB serial line which will listen for GDB break packets. This lets you stop the target asynchronously when using GDB, usually by hitting Control+C or pressing the STOP button. This option differs from CYGDBG_HAL_DEBUG_GDB_BREAK_SUPPORT in that it is used when the GDB stubs are NOT present. </description>
  </feature>
  <feature>
   <id>CYGDBG_HAL_DEBUG_GDB_THREAD_SUPPORT</id>
   <description>This option enables some extra HAL code which is needed to support multi-threaded source level debugging. </description>
  </feature>
  <feature>
   <id>CYGNUM_HAL_DEBUG_GDB_PROTOCOL_RETRIES</id>
   <description>This option controls the number of attempts that eCos programs will make to send a $O packet to a host GDB process. If it is set non-zero, then the target process will attempt to resend the $O packet data up to this number of retries. Caution: use of this option is not recommended as it can thoroughly confuse the host GDB process. </description>
  </feature>
  <feature>
   <id>CYGNUM_HAL_DEBUG_GDB_PROTOCOL_TIMEOUT</id>
   <description>This option controls the time (in milliseconds) that eCos programs will wait for a response when sending packets to a host GDB process. If this time elapses, then the packet will be resent, up to some maximum number of times (CYGNUM_HAL_DEBUG_GDB_PROTOCOL_RETRIES). </description>
  </feature>
  <feature>
   <id>CYGDBG_HAL_CRCTABLE_LOCATION</id>
   <description>The stubs use a 1 kilobyte CRC table that can either be pregenerated and placed in ROM, or generated at runtime in RAM. Depending on your memory constraints, one of these options may be better. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_ROM_MONITOR</id>
   <description>Support for ROM monitors can be built in to your application. It may also be relevant to build your application as a ROM monitor itself. Such options are contained here if relevant for your chosen platform. The options and ROM monitors available to choose are platform-dependent. </description>
  </feature>
  <feature>
   <id>CYGINT_HAL_VIRTUAL_VECTOR_COMM_BAUD_SUPPORT</id>
   <description>Whether this target supports the __COMMCTL_GETBAUD and __COMMCTL_SETBAUD virtual vector comm control operations. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_VIRTUAL_VECTOR_SUPPORT</id>
   <description>Virtual vector support allows the HAL to let the ROM monitor handle certain operations. The virtual vector table defines a calling interface between applications running in RAM and the ROM monitor. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_VIRTUAL_VECTOR_INHERIT_CONSOLE</id>
   <description>When this option is set, the application will inherit the console as set up by the ROM monitor. This means that the application will use whatever channel and mangling style was used by the ROM monitor when the application was launched. </description>
  </feature>
  <feature>
   <id>CYGPRI_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL_CONFIGURABLE</id>
   <description>This option is a configuration hint - it is enabled when the HAL initialization code will make use of the debug channel configuration option. </description>
  </feature>
  <feature>
   <id>CYGPRI_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL_CONFIGURABLE</id>
   <description>This option is a configuration hint - it is enabled when the HAL initialization code will make use of the console channel configuration option. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_VIRTUAL_VECTOR_INIT_WHOLE_TABLE</id>
   <description>This option will cause the whole of the virtual vector table to be initialized with dummy values on startup. When this option is enabled, all the options below must also be enabled - or the table would be empty when the application launches. On targets where older ROM monitors without virtual vector support may still be in use, it is necessary for RAM applictions to initialize the table (since all HAL diagnostics and debug IO happens via the table). </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DEFAULT</id>
   <description>By default most virtual vectors will be claimed by RAM startup configurations, meaning that the RAM application will provide the services. The exception is COMMS support (HAL diagnostics/debugging IO) which is left in the control of the ROM monitor. The reasoning behind this is to get as much of the code exercised during regular development so it is known to be working the few times a new ROM monitor or a ROM production configuration is used - COMMS are excluded only by necessity in order to avoid breaking an existing debugger connections (there may be ways around this). For production RAM configurations this option can be switched off, causing the appliction to rely on the ROM monitor for these services, thus saving some space. Individual vectors may also be left unclaimed, controlled by the below options (meaning that the associated service provided by the ROM monitor will be used). </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_RESET</id>
   <description>This option will cause the reset and kill_by_reset virtual vectors to be claimed. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_VERSION</id>
   <description>This option will cause the version virtual vectors to be claimed. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DELAY_US</id>
   <description>This option will cause the delay_us virtual vector to be claimed. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_DATA</id>
   <description>This option will cause the data virtual vectors to be claimed. At present there is only one, used by the RedBoot ethernet driver to share diag output. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_VIRTUAL_VECTOR_CLAIM_COMMS</id>
   <description>This option will cause the communication tables that are part of the virtual vectors mechanism to be claimed. Note that doing this may cause an existing ROM monitor communication connection to be closed. For this reason, the option is disabled per default for normal application configurations. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_VIRTUAL_VECTOR_DIAG</id>
   <description>All HAL IO happens via the virtual vector table / comm tables when those tables are supported by the HAL. If so desired, the low-level IO functions can still be provided by the RAM application by enabling the CLAIM_COMMS option. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_USE_ROM_MONITOR</id>
   <description>Support can be enabled for boot ROMs or ROM monitors which contain GDB stubs. This support changes various eCos semantics such as the encoding of diagnostic output, and the overriding of hardware interrupt vectors. </description>
  </feature>
  <feature>
   <id>CYGSEM_HAL_ROM_MONITOR</id>
   <description>Enable this option if this program is to be used as a ROM monitor, i.e. applications will be loaded into RAM on the board, and this ROM monitor may process exceptions or interrupts generated from the application. This enables features such as utilizing a separate interrupt stack when exceptions are generated. </description>
  </feature>
  <feature>
   <id>CYGINT_HAL_PLF_IF_INIT</id>
   <description>Platforms which provide additional I/O channels can implement this interface, indicating that the function plf_if_init() needs to be called. </description>
  </feature>
  <feature>
   <id>CYGINT_HAL_PLF_IF_IDE</id>
   <description>Platforms which provide IDE controllers can implement this interface, indicating that IDE I/O macros are available. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_GDB_FILEIO</id>
   <description>This option enables support for various file I/O operations using the GDB remote protocol to communicate with GDB. The operations are then performed on the debugging host by proxy. These operations are only currently available by using a system call interface to RedBoot. This may change in the future. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_BUILD_COMPILER_TESTS</id>
   <description>Enabling this option causes compiler tests to be built. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_TESTS</id>
   <description>This option specifies the set of tests for the common HAL. </description>
  </feature>
  <feature>
   <id>CYGINT_HAL_TESTS_NO_CACHES</id>
   <description>Some architectures and/or platforms do not have caches. By implementing this interface, these can disable the various cache-related tests. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_SH</id>
   <description>The SH (SuperH) architecture HAL package provides generic support for this processor architecture. It is also necessary to select a specific target platform HAL package. </description>
  </feature>
  <feature>
   <id>CYGINT_HAL_SH_DMA_CHANNELS_USED</id>
   <description>Various drivers may request use of a DMA channel, but only so many are available. These interfaces make sure the DMA resources are not overcommitted. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_SH_CPU</id>
   <description>CPU type and endian mode can be selected using these option. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_FPU_REGS</id>
   <description>Number of FPU registers present. The SH3 has 16 registers in one bank. The SH4 has 32 registers in two banks. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_BIGENDIAN</id>
   <description>Use the CPU in big-endian mode. </description>
  </feature>
  <feature>
   <id>CYGINT_HAL_SH_PLF_BIGENDIAN_DEFAULT</id>
   <description>This interface is set by the platform, not by the user, to indicate what the default endianness should be. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_SH_7750</id>
   <description>The SH4 7750 microprocessor. This is an embedded part that in addition to the SH4 processor core has built in peripherals such as memory controllers, DMA controllers, serial ports and timers/counters. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_SH_7751</id>
   <description>The SH4 7751 microprocessor. This is an embedded part that in addition to the SH4 processor core has built in peripherals such as memory controllers, DMA controllers, serial ports and timers/counters. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_SH_202</id>
   <description>The SH4-202 microprocessor. This is an embedded part that in addition to the SH4 processor core has built in peripherals such as memory controllers, DMA controllers, serial ports and timers/counters. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_SH_CACHE</id>
   <description>Initial cache settings can be specified using these options. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_CACHE_ENABLE</id>
   <description>Controls whether caches should be enabled on startup. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_CACHE_MODE_P0</id>
   <description>Controls what cache mode the cache should be put in at startup for areas P0, U0 and P3. Write-back mode improves performance by letting dirty data to be kept in the cache for a period of time, allowing mutiple writes to the same cache line to be written back to memory in one memory transaction. In Write-through mode, each individual write will cause a memory transaction. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_CACHE_MODE_P1</id>
   <description>Controls what cache mode the cache should be put in at startup for area P1. Write-back mode improves performance by letting dirty data to be kept in the cache for a period of time, allowing mutiple writes to the same cache line to be written back to memory in one memory transaction. In Write-through mode, each individual write will cause a memory transaction. </description>
  </feature>
  <feature>
   <id>CYGNUM_HAL_RTC_CONSTANTS</id>
   <description>The NUMERATOR divided by the DENOMINATOR gives the number of nanoseconds per tick. The PERIOD is the divider to be programmed into a hardware timer that is driven from an appropriate hardware clock, such that the timer overflows once per tick (normally generating a CPU interrupt to mark the end of a tick). The tick rate is typically 100Hz. The SH HAL uses TMU counter 0 for driving the real-time clock. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_SH_TESTS</id>
   <description>This option specifies the set of tests for the SH HAL. </description>
  </feature>
  <feature>
   <id>CYGBLD_HAL_SH_BSP_SYSCALL</id>
   <description>When the RedBoot option for supporting syscalls is enabled, build the SH architecture support file. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_SH_SH4</id>
   <description>The SH4 (SuperH 4) architecture HAL package provides generic support for this processor architecture. It is also necessary to select a specific target platform HAL package. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_CLOCK_SETTINGS</id>
   <description>The various clocks used by the system are controlled by these options, some of which are derived from platform settings. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_TMU_PRESCALE_0</id>
   <description>The peripheral clock is driving the counter used for the real-time clock, prescaled by this factor. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_PROCESSOR_SPEED</id>
   <description>The peripheral speed is computed from the PLL2 output clock speed and the IFC divider settings. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_BOARD_SPEED</id>
   <description>The peripheral speed is computed from the PLL2 output clock speed and the BFC divider settings. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_ONCHIP_PERIPHERAL_SPEED</id>
   <description>The peripheral speed is computed from the PLL2 output clock speed and the PFC divider settings. </description>
  </feature>
  <feature>
   <id>CYGNUM_HAL_SH_SH4_SCIF_BAUD_RATE</id>
   <description>This controls the default baud rate used for communicating with GDB / displaying diagnostic output. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_SH_INTERRUPT</id>
   <description>Initial interrupt settings can be specified using these option. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_IRQ_USE_IRQLVL</id>
   <description>It is possible for the IRL0-3 pins to be used as IRL inputs by enabling this option. </description>
  </feature>
  <feature>
   <id>CYGPKG_HAL_SH_SH4_202_MD</id>
   <description>The SH4-202-MD HAL package provides the support needed to run eCos on a SuperH SH4-202 MicroDev CPU board. </description>
  </feature>
  <feature>
   <id>CYGNUM_HAL_VIRTUAL_VECTOR_DEBUG_CHANNEL</id>
   <description>The MicroDev board has one serial port. </description>
  </feature>
  <feature>
   <id>CYGNUM_HAL_VIRTUAL_VECTOR_CONSOLE_CHANNEL</id>
   <description>The MicroDev board has one serial port which is used as both the diagnostic and console channel. </description>
  </feature>
  <feature>
   <id>CYGNUM_HAL_VIRTUAL_VECTOR_CHANNELS_DEFAULT_BAUD</id>
   <description>This option controls the default baud rate used for the Console/GDB connection. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_PLF_CLOCK_SETTINGS</id>
   <description>The various clocks used by the system are derived from these options. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_OOC_XTAL</id>
   <description>This option specifies the frequency of the crystal all other clocks are derived from. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_OOC_CKIO</id>
   <description>This selects whether CKIO output is enabled. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_OOC_PLL_1</id>
   <description>This selects the multiplication factor provided by PLL1. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_OOC_PLL_2</id>
   <description>This selects the multiplication factor provided by PLL2. If PLL2 is disabled this option should be set to zero. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_OOC_DIVIDER_1</id>
   <description>This divider option affects all clocks. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_OOC_DIVIDER_IFC</id>
   <description>This divider option affects the CPU clock. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_OOC_DIVIDER_BFC</id>
   <description>This divider option affects the bus clock. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_OOC_DIVIDER_PFC</id>
   <description>This divider option affects the peripheral clock. </description>
  </feature>
  <feature>
   <id>CYGHWR_HAL_SH_OOC_CLOCK_MODE</id>
   <description>This option must mirror the clock mode hardwired on the MD0-MD2 pins of the CPU in order to correctly initialize the FRQCR register. </description>
  </feature>
  <feature>
   <id>CYG_HAL_STARTUP</id>
   <description>When targetting the MicroDev board it is possible to build the system for either RAM bootstrap or ROM bootstrap. RAM bootstrap generally requires that the board is equipped with ROMs containing a suitable ROM monitor or equivalent software that allows GDB to download the eCos application on to the board. The ROM bootstrap typically requires that the eCos application be blown into flash ROM or equivalent technology. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO</id>
   <description>The eCos system is supplied with a number of different device drivers. This option enables the basic I/O system support which is the basis for all drivers. </description>
  </feature>
  <feature>
   <id>CYGDBG_IO_INIT</id>
   <description>This option enables verbose messages to be displayed on the system 'diag' device during I/O system initialization. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FILE_SUPPORT</id>
   <description>This option control support for simple file I/O primitives. It is only present if the FILEIO package is not included. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_NFILE</id>
   <description>This option controls the number of open files. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL</id>
   <description>This option enables drivers for basic I/O services on serial devices. </description>
  </feature>
  <feature>
   <id>CYGOPT_IO_SERIAL_SUPPORT_NONBLOCKING</id>
   <description>This option enables extra code in the generic serial driver which allows clients to switch read() and write() call semantics from blocking to non-blocking. </description>
  </feature>
  <feature>
   <id>CYGINT_IO_SERIAL_BLOCK_TRANSFER</id>
   <description>Some low-level drivers can be optimized to transfer blocks of data instead of a single character at a time. These usually rely on a hardware FIFO of some sort. </description>
  </feature>
  <feature>
   <id>CYGOPT_IO_SERIAL_SUPPORT_LINE_STATUS</id>
   <description>This option indicates that if the serial driver supports it, serial line status and modem status information should be propagated to higher layers via callbacks. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_FLOW_CONTROL</id>
   <description>This component contains options related to flow control. </description>
  </feature>
  <feature>
   <id>CYGOPT_IO_SERIAL_FLOW_CONTROL_SOFTWARE</id>
   <description>This component enables support of software flow control. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_FLOW_CONTROL_XON_CHAR</id>
   <description>This option specifies the ascii character used to indicate that transmission should start. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_FLOW_CONTROL_XOFF_CHAR</id>
   <description>This option specifies the ascii character used to indicate that transmission should stop. </description>
  </feature>
  <feature>
   <id>CYGOPT_IO_SERIAL_FLOW_CONTROL_HW</id>
   <description>If the hardware supports it, this option allows hardware flow control to be enabled. This may be in the form of either or both of RTS/CTS, or DSR/DTR flow control. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_FLOW_CONTROL_DEFAULT</id>
   <description>This option allows a default flow control method to be defined. Combinations of flow control methods may also be set, but this is only possible by using the cyg_io_set_config() API in source code. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_SERIAL_FLOW_CONTROL_LOW_WATER_PERCENT</id>
   <description>This sets the water mark used for determining when to disable flow control, expressed as a percentage of the buffer size. When the receive buffer size is lower than this percentage, if the transmitter had previously been throttled, it will now be informed it can restart. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_SERIAL_FLOW_CONTROL_HIGH_WATER_PERCENT</id>
   <description>This sets the water mark used for determining when to enable flow control, expressed as a percentage of the buffer size. When the receive buffer size exceeds this percentage, signals are sent to the transmitter to tell it to throttle tranmission. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_TTY</id>
   <description>This option enables a simple terminal-like device driver that can be used for serial devices that interact with humans, such as a system console. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_HALDIAG</id>
   <description>This option enables the use of the HAL diagnostic channel via the standard I/O drivers. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_TTY_CONSOLE</id>
   <description>This option selects the TTY device to use for the console. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_TTY_TTYDIAG</id>
   <description>This option causes '/dev/ttydiag' to be included in the standard drivers. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_TTY_TTY0</id>
   <description>This option causes '/dev/tty0' to be included in the standard drivers. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_TTY_TTY0_DEV</id>
   <description>This option selects the physical device to use for '/dev/tty0'. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_TTY_TTY1</id>
   <description>This option causes '/dev/tty1' to be included in the standard drivers. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_TTY_TTY1_DEV</id>
   <description>This option selects the physical device to use for '/dev/tty1'. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_TTY_TTY2</id>
   <description>This option causes '/dev/tty2' to be included in the standard drivers. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_TTY_TTY2_DEV</id>
   <description>This option selects the physical device to use for '/dev/tty2'. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_TTY_TTY3</id>
   <description>This option causes '/dev/tty3' to be included in the standard drivers. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_TTY_TTY3_DEV</id>
   <description>This option selects the physical device to use for '/dev/tty3'. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_TERMIOS</id>
   <description>This option enables terminal drivers compatible with POSIX termios. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_TERMIOS_TERMIOS0</id>
   <description>This option causes '/dev/termios0' to be included in the standard drivers. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_TERMIOS_TERMIOS0_DEV</id>
   <description>This option selects the physical device to use for '/dev/termios0'. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_TERMIOS_TERMIOS1</id>
   <description>This option causes '/dev/termios1' to be included in the standard drivers. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_TERMIOS_TERMIOS1_DEV</id>
   <description>This option selects the physical device to use for '/dev/termios1'. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_TERMIOS_TERMIOS2</id>
   <description>This option causes '/dev/termios2' to be included in the standard drivers. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_TERMIOS_TERMIOS2_DEV</id>
   <description>This option selects the physical device to use for '/dev/termios2'. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_TERMIOS_TERMIOS3</id>
   <description>This option causes '/dev/termios3' to be included in the standard drivers. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_TERMIOS_TERMIOS3_DEV</id>
   <description>This option selects the physical device to use for '/dev/termios3'. </description>
  </feature>
  <feature>
   <id>CYGSEM_IO_SERIAL_TERMIOS_USE_SIGNALS</id>
   <description>This option selects whether those parts of the termios interface involving signals is supported. This includes BRKINT mode, the INTR and QUIT characters, and whether SIGHUP is sent on terminal close. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_DEVICES</id>
   <description>This option enables the hardware device drivers for the current platform. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_SH_SCIF</id>
   <description>This option enables the serial device drivers for the SCIF module in Hitachi SH CPUs. </description>
  </feature>
  <feature>
   <id>CYGINT_IO_SERIAL_SH_SCIF_DMA</id>
   <description>The serial driver can use DMA to move data from the transmit buffer to the serial controller if the CPU supports it. </description>
  </feature>
  <feature>
   <id>CYGINT_IO_SERIAL_SH_SCIF_ASYNC_RXTX</id>
   <description>By enabling this option, the SCIF driver will be able to support controllers with transceivers that are asynchronous (RS4xx). This will cause RX to be disabled before TX is enabled, and vice versa. </description>
  </feature>
  <feature>
   <id>CYGINT_IO_SERIAL_SH_SCIF_IRDA</id>
   <description>By enabling this option, the SCIF driver will be able to support controllers in IrDA mode. </description>
  </feature>
  <feature>
   <id>CYGHWR_IO_SERIAL_SH_SH2_SCIF_IRDA_TXRX_COMPENSATION</id>
   <description>When switching from TX mode to RX mode, the controller causes a spurious 0xff character to be received at speeds up to 57600 baud. At higher baud rates, more spurious characters may be received. Enabling this option tries to remove the spurious characters, but since there are no errors reported from the controller, it is impossible to do so with any kind of precision. Having this option enabled allows some eCos serial tests to run. There is a matching option in the SH2 HAL controlling a similar kludge for the polled driver, making RedBoot usable. It is an incomplete kludge however, and for any real use of the IrDA mode for data transmission, the option should be disabled, and a protocol capable of handling the spurious receive characters must be used on top of the driver. Note that the problem is exaggerated when the baud rate is changed. </description>
  </feature>
  <feature>
   <id>CYGINT_IO_SERIAL_SH_SCIF_BR_INTERRUPT</id>
   <description>Some controllers route BREAK interrupts to the error interrupt vector. Others have a separate vector. When this interface is implemented, the driver will handle the separate BR vector. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_SH_SCIF_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_SH_SCIF_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building these serial device drivers. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_SH_SCIF_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building these serial device drivers. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_SH_SH4_202_MD</id>
   <description>This option enables the serial device drivers for the SuperH SH4-202 MicroDev board, based on the generic SH SCIF driver. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_SH_SH4_202_MD_SERIAL1</id>
   <description>This option includes the serial device driver for the SCIF port on the SH4-202 MicroDev development board. </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_SERIAL_SH_SH4_202_MD_SERIAL1_NAME</id>
   <description>This option specifies the device name for the serial port. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_SERIAL_SH_SH4_202_MD_SERIAL1_BAUD</id>
   <description>This option specifies the default baud rate (speed) for the serial driver. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_SERIAL_SH_SH4_202_MD_SERIAL1_BUFSIZE</id>
   <description>This option specifies the size of the internal buffers used for the serial driver. </description>
  </feature>
  <feature>
   <id>CYGBLD_IO_SERIAL_EXTRA_TESTS</id>
   <description>This option enables the building of some extra tests which can be used when testing / debugging serial drivers. These are not built by default since they do not use the dedicated testing infrastructure. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the serial device drivers. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the serial device drivers. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_TESTS</id>
   <description>This option specifies the set of tests for the serial device drivers. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_SERIAL_SELECT_SUPPORT</id>
   <description>This option enables support for the select() API function on all serial devices. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_ETH_DRIVERS</id>
   <description>Platform independent ethernet drivers </description>
  </feature>
  <feature>
   <id>CYGINT_IO_ETH_MULTICAST</id>
   <description>This interface defines whether or not a driver can handle requests for multicast addressing. </description>
  </feature>
  <feature>
   <id>CYGDBG_IO_ETH_DRIVERS_DEBUG</id>
   <description>Selecting this option will include code to allow the driver to print lots of information on diagnostic output such as full packet dumps. </description>
  </feature>
  <feature>
   <id>CYGDBG_IO_ETH_DRIVERS_DEBUG_VERBOSITY</id>
   <description>The value of this option indicates the default verbosity level of debugging output. 0 means no debugging output is made by default. Higher values indicate higher verbosity. The verbosity level may also be changed at run time by changing the variable cyg_io_eth_net_debug. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_ETH_DRIVERS_SG_LIST_SIZE</id>
   <description>A scatter-gather list is used to pass requests to/from the physical device driver. This list can typically be small, as the data is normally already packed into reasonable chunks. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_ETH_DRIVERS_WARN_NO_MBUFS</id>
   <description>Warnings about running out of mbufs are printed to the diagnostic output channel via diag_printf() if this option is enabled. Mbufs are the network stack's basic dynamic memory objects that hold all packets in transit; running out is bad for performance but not fatal, not a crash. You might want to turn off the warnings to preserve realtime properties of the system even in extremis. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_ETH_DRIVERS_SIMULATED_FAILURES</id>
   <description>This package contains a suite of simulated failure modes for the ethernet device layer, including dropping and/or corrupting received packets, dropping packets queued for transmission, and simulating a complete network break. It requires the kernel as a source of time information. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_ETH_DRIVERS_SIMULATE_LINE_CUT</id>
   <description>This option causes the system to drop all packets for a short random period (10s of seconds), and then act normally for up to 4 times that long. This simulates your sysadmin fiddling with plugs in the network switch cupboard. </description>
  </feature>
  <feature>
   <id>CYGSEM_IO_ETH_DRIVERS_PASS_PACKETS</id>
   <description>Define this to allow packets seen by this layer to be passed on to the previous logical layer, i.e. when stand-alone processing replaces system (eCos) processing. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_ETH_DRIVERS_NUM_PKT</id>
   <description>This option is used to allocate space to buffer incoming network packets. These buffers are used to hold data until they can be logically processed by higher layers. </description>
  </feature>
  <feature>
   <id>CYGSEM_IO_ETH_DRIVERS_WARN</id>
   <description>Selecting this option will allows the stand-alone ethernet driver to display warnings on the system console when incoming network packets are being discarded due to lack of buffer space. </description>
  </feature>
  <feature>
   <id>CYGINT_IO_ETH_INT_SUPPORT_REQUIRED</id>
   <description>This interface is used to indicate to the low level device drivers that interrupt driven operation is required by higher layers. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_ETH_DRIVERS_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the common ethernet support package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_DEVS_ETH_SH_MICRODEV</id>
   <description>Ethernet driver for Microdev boards. </description>
  </feature>
  <feature>
   <id>CYGPKG_DEVS_ETH_SH_MICRODEV_ETH0</id>
   <description>This option includes the ethernet device driver for the Microdev port. </description>
  </feature>
  <feature>
   <id>CYGDAT_DEVS_ETH_SH_MICRODEV_ETH0_NAME</id>
   <description>This option sets the name of the ethernet device. </description>
  </feature>
  <feature>
   <id>CYGSEM_DEVS_ETH_SH_MICRODEV_ETH0_SET_ESA</id>
   <description>Enabling this option will allow the ethernet station address to be forced to the value set by the configuration. This may be required if the hardware does not include a serial EEPROM for the ESA. </description>
  </feature>
  <feature>
   <id>CYGDAT_DEVS_ETH_SH_MICRODEV_ETH0_ESA</id>
   <description>A static ethernet station address. Caution: Booting two systems with the same MAC on the same network, will cause severe conflicts. </description>
  </feature>
  <feature>
   <id>CYGPKG_DEVS_ETH_SMSC_LAN91CXX</id>
   <description>Ethernet driver for SMSC LAN91CXX compatible controllers. </description>
  </feature>
  <feature>
   <id>CYGSEM_DEVS_ETH_SMSC_LAN91CXX_WRITE_EEPROM</id>
   <description>The ioctl() socket call with operand SIOCSIFHWADDR sets the interface hardware address - the MAC address or Ethernet Station Address (ESA). This option causes the new MAC address to be written into the EEPROM associated with the interface, so that the new MAC address is permanently recorded. Doing this should be a carefully chosen decision, hence this option. </description>
  </feature>
  <feature>
   <id>CYGNUM_DEVS_ETH_SMSC_LAN91CXX_INT_PRIO</id>
   <description>When registering the interrupt handler this specifies the priority of the interrupt. Some hardware platforms require values other than the default given here. Such platforms can then override this value in the hardware specific package. </description>
  </feature>
  <feature>
   <id>CYGINT_DEVS_ETH_SMSC_LAN91CXX_STATIC_ESA</id>
   <description>If this is nonzero, then the ESA (MAC address) is statically configured in the platform-specific package which instantiates this driver with all its details. Note that use of this option is deprecated in favor of a CYGSEM_DEVS_ETH_..._SET_ESA option in the platform specific driver. </description>
  </feature>
  <feature>
   <id>CYGINT_DEVS_ETH_SMSC_LAN91CXX_PCMCIA_MODE</id>
   <description>If this is nonzero, then the chip is assumed to be hardware configured in PCMCIA mode. </description>
  </feature>
  <feature>
   <id>CYGPKG_DEVS_ETH_SMSC_LAN91CXX_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the LAN91CXX ethernet driver package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGIMP_POWER_PROVIDE_STRINGS</id>
   <description>Optionally each power controller can contain a string identifying the hardware or functionality it is associated with. This string is not required by the generic power management, but may be useful when presenting the current state of each controller to the user. </description>
  </feature>
  <feature>
   <id>CYGIMP_POWER_PROVIDE_POLICY_DATA</id>
   <description>Optionally each power controller can provide a word of data for use by the policy manager, for example to store a pointer to some data structure controlled by the policy manager. If the policy manager has no need for such additional data this option can be safely disabled, saving a small amount of memory. </description>
  </feature>
  <feature>
   <id>CYGPKG_POWER_THREAD</id>
   <description>Optionally the power management code can run in its own thread. This can be useful if state changes can be requested from any code, including DSRs. If on the other hand the power management policy code runs in its own thread and is the only part of the system that makes power management calls, a separate thread is redundant. </description>
  </feature>
  <feature>
   <id>CYGNUM_POWER_THREAD_STACKSIZE</id>
   <description>If a separate power management thread is being used then this option allows the stack size to be controlled. If any power controllers require an unusually large amount of stack then they may impose a lower bound on this value, or alternatively the user may need to increase the stack. </description>
  </feature>
  <feature>
   <id>CYGNUM_POWER_THREAD_PRIORITY</id>
   <description>This is the priority for the power management thread. Typically it defaults to a high priority, thus ensuring that when the system wakes up from a sleep state all of the power controllers are activated early on and by the time other threads run they do not have to worry about various devices still being asleep. </description>
  </feature>
  <feature>
   <id>CYGPKG_POWER_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_POWER_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the power management package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_POWER_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the power management package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_INFRA</id>
   <description>Common types and useful macros. Tracing and assertion facilities. Package startup options. </description>
  </feature>
  <feature>
   <id>CYGPKG_INFRA_DEBUG</id>
   <description>The eCos source code contains a significant amount of internal debugging support, in the form of assertions and tracing. Assertions check at runtime that various conditions are as expected; if not, execution is halted. Tracing takes the form of text messages that are output whenever certain events occur, or whenever functions are called or return. The most important property of these checks and messages is that they are not required for the program to run. It is prudent to develop software with assertions enabled, but disable them when making a product release, thus removing the overhead of that checking. It is possible to enable assertions and tracing independently. There are also options controlling the exact behaviour of the assertion and tracing facilities, thus giving users finer control over the code and data size requirements. </description>
  </feature>
  <feature>
   <id>CYGDBG_USE_ASSERTS</id>
   <description>If this option is defined, asserts in the code are tested. Assert functions (CYG_ASSERT()) are defined in 'include/cyg/infra/cyg_ass.h' within the 'install' tree. If it is not defined, these result in no additional object code and no checking of the asserted conditions. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_PRECONDITIONS</id>
   <description>This option allows individual control of preconditions. A precondition is one type of assert, which it is useful to control separately from more general asserts. The function is CYG_PRECONDITION(condition,msg). </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_POSTCONDITIONS</id>
   <description>This option allows individual control of postconditions. A postcondition is one type of assert, which it is useful to control separately from more general asserts. The function is CYG_POSTCONDITION(condition,msg). </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_LOOP_INVARIANTS</id>
   <description>This option allows individual control of loop invariants. A loop invariant is one type of assert, which it is useful to control separately from more general asserts, particularly since a loop invariant is typically evaluated a great many times when used correctly. The function is CYG_LOOP_INVARIANT(condition,msg). </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_ASSERT_MESSAGE</id>
   <description>All assertions within eCos contain a text message which should give some information about the condition being tested. These text messages will end up being embedded in the application image and hence there is a significant penalty in terms of image size. It is possible to suppress the use of these messages by disabling this option. This results in smaller code size, but there is less human-readable information if an assertion actually gets triggered. </description>
  </feature>
  <feature>
   <id>CYGDBG_USE_TRACING</id>
   <description>If this option is defined, tracing operations result in output or logging, depending on other options. This may have adverse effects on performance, if the time taken to output message overwhelms the available CPU power or output bandwidth. Trace functions (CYG_TRACE()) are defined in 'include/cyg/infra/cyg_trac.h' within the 'install' tree. If it is not defined, these result in no additional object code and no trace information. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_FUNCTION_REPORTS</id>
   <description>This option allows individual control of function entry/exit tracing, independent of more general tracing output. This may be useful to remove clutter from a trace log. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_TRACE_MESSAGE</id>
   <description>All trace calls within eCos contain a text message which should give some information about the circumstances. These text messages will end up being embedded in the application image and hence there is a significant penalty in terms of image size. It is possible to suppress the use of these messages by disabling this option. This results in smaller code size, but there is less human-readable information available in the trace output, possibly only filenames and line numbers. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_TRACE_ASSERT_NULL</id>
   <description>A null output module which is useful when debugging interactively; the output routines can be breakpointed rather than have them actually 'print' something. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_TRACE_ASSERT_SIMPLE</id>
   <description>An output module which produces simple output from tracing and assertion events. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_TRACE_ASSERT_FANCY</id>
   <description>An output module which produces fancy output from tracing and assertion events. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_TRACE_ASSERT_BUFFER</id>
   <description>An output module which buffers output from tracing and assertion events. The stored messages are output when an assert fires, or CYG_TRACE_PRINT() (defined in &lt;cyg/infra/cyg_trac.h&gt;) is called. Of course, there will only be stored messages if tracing per se (CYGDBG_USE_TRACING) is enabled above. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE</id>
   <description>The size of the trace buffer. This counts the number of trace records stored. When the buffer fills it either wraps, stops recording, or generates output. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_TRACE_BUFFER_WRAP</id>
   <description>When the trace buffer has filled with records it starts again at the beginning. Hence only the last CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE messages will be recorded. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_TRACE_BUFFER_HALT</id>
   <description>When the trace buffer has filled with records it stops recording. Hence only the first CYGDBG_INFRA_DEBUG_TRACE_BUFFER_SIZE messages will be recorded. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT</id>
   <description>When the trace buffer has filled with records it prints the contents of the buffer. The buffer is then emptied and the system continues. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_TRACE_BUFFER_PRINT_ON_ASSERT</id>
   <description>When an assertion fails the trace buffer will be printed to the default diagnostic device. </description>
  </feature>
  <feature>
   <id>CYGDBG_INFRA_DEBUG_FUNCTION_PSEUDOMACRO</id>
   <description>All trace and assert calls within eCos contain a reference to the builtin macro '__PRETTY_FUNCTION__', which evaluates to a string containing the name of the current function. This is useful when reading a trace log. It is possible to suppress the use of the function name by disabling this option. This results in smaller code size, but there is less human-readable information available in the trace output, possibly only filenames and line numbers. </description>
  </feature>
  <feature>
   <id>CYGPKG_INFRA_STARTUP</id>
   <description>Some packages require a startup routine to be called. This can be carried out by application code, by supplying a routine called cyg_package_start() which calls the appropriate package startup routine(s). Alternatively, this routine can be constructed automatically and configured to call the startup routines of your choice. </description>
  </feature>
  <feature>
   <id>CYGSEM_START_UITRON_COMPATIBILITY</id>
   <description>Generate a call to initialize the uITRON compatibility subsystem within the system version of cyg_package_start(). This enables compatibility with uITRON. You must configure uITRON with the correct tasks before starting the uItron subsystem. If this is disabled, and you want to use uITRON, you must call cyg_uitron_start() from your own cyg_package_start() or cyg_userstart(). </description>
  </feature>
  <feature>
   <id>CYGIMP_INFRA_PREFER_SMALL_TO_FAST_MEMCPY</id>
   <description>Enabling this option causes the implementation of the standard memcpy() routine to reduce code size at the expense of execution speed. This option is automatically enabled with the use of the -Os option to the compiler. Also note that the compiler will try to use its own builtin version of memcpy() if possible, ignoring the implementation in this package, unless given the -fno-builtin compiler option. </description>
  </feature>
  <feature>
   <id>CYGIMP_INFRA_PREFER_SMALL_TO_FAST_MEMSET</id>
   <description>Enabling this option causes the implementation of the standard memset() routine to reduce code size at the expense of execution speed. This option is automatically enabled with the use of the -Os option to the compiler. Also note that the compiler will try to use its own builtin version of memset() if possible, ignoring the implementation in this package, unless given the -fno-builtin compiler option. </description>
  </feature>
  <feature>
   <id>CYGFUN_INFRA_EMPTY_DELETE_FUNCTIONS</id>
   <description>To deal with virtual destructors, where the correct delete() function must be called for the derived class in question, the underlying delete is called when needed, from destructors. This is regardless of whether the destructor is called by delete itself. So there is a reference to delete() from all destructors. The default builtin delete() attempts to call free() if there is one defined. So, if you have destructors, and you have free(), as in malloc() and free(), any destructor counts as a reference to free(). So the dynamic memory allocation code is linked in regardless of whether it gets explicitly called. This increases code and data size needlessly. To defeat this undesirable behaviour, we define empty versions of delete and delete[]. But doing this prevents proper use of dynamic memory in C++ programs via C++'s new and delete operators. Therefore, this option is provided for explicitly disabling the provision of these empty functions, so that new and delete can be used, if that is what is required. </description>
  </feature>
  <feature>
   <id>CYGNUM_INFRA_EMPTY_DELETE_THRESHOLD</id>
   <description>Some users don't know about the empty delete function and then wonder why their C++ classes are leaking memory. If INFRA_DEBUG is enabled we keep a counter for the number of times delete is called. If it goes above this threshold we throw an assertion failure. This should point heavy users of delete in the right direction without upsetting those who want an empty delete function. </description>
  </feature>
  <feature>
   <id>CYGFUN_INFRA_DUMMY_ABORT</id>
   <description>This option controls the inclusion of a dummy abort() function. Parts of the C and C++ compiler runtime systems contain references to abort(), particulary in the C++ exception handling code. It is not possible to eliminate these references, so this dummy function in included to satisfy them. It is not expected that this function will ever be called, so its current behaviour is to simply loop. </description>
  </feature>
  <feature>
   <id>CYGSEM_INFRA_RESET_ON_TEST_EXIT</id>
   <description>If this option is set then test case programs will reset the platform when they terminate, as opposed to the default which is to just hang in a loop. </description>
  </feature>
  <feature>
   <id>CYGFUN_INFRA_DUMMY_STRLEN</id>
   <description>This option controls the inclusion of a dummy strlen() function. Parts of the C and C++ compiler runtime systems contain references to strlen(), particulary in the C++ exception handling code. It is not possible to eliminate these references, so this dummy function in included to satisfy them. While it is not expected that this function will ever be called, it is functional but uses the simplest, smallest algorithm. There is a faster version of strlen() in the C library. </description>
  </feature>
  <feature>
   <id>CYGBLD_INFRA_CFLAGS_WARNINGS_AS_ERRORS</id>
   <description>Enabling this option will cause all compiler warnings to show as errors and bring the library build to a halt. This is used to ensure that the code base is warning free, and thus ensure that newly introduced warnings stand out and get fixed before they show up as weird run-time behavior. </description>
  </feature>
  <feature>
   <id>CYGBLD_INFRA_CFLAGS_PIPE</id>
   <description>Enabling this option will cause the compiler to feed the assembly output the the assembler via a pipe instead of via a temporary file. This normally reduces the build time. </description>
  </feature>
  <feature>
   <id>CYGPKG_INFRA_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package. </description>
  </feature>
  <feature>
   <id>CYGPKG_INFRA_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the eCos infra package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_INFRA_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the eCos infra package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_INFRA_LDFLAGS_REMOVE</id>
   <description>This option modifies the set of linker flags for building the eCos infra package tests. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_INFRA_LDFLAGS_ADD</id>
   <description>This option modifies the set of linker flags for building the eCos infra package tests. These flags are added to the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGNUM_TESTS_RUN_COUNT</id>
   <description>This option controls the number of times tests will execute their basic function. Not all tests will honor this setting, but those that do will execute the test N times before terminating. A value less than 0 indicates to run forever. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL</id>
   <description>This package contains the core functionality of the eCos kernel. It relies on functionality provided by various HAL packages and by the eCos infrastructure. In turn the eCos kernel provides support for other packages such as the device drivers and the uITRON compatibility layer. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_INTERRUPTS</id>
   <description>The majority of configuration options related to interrupt handling are in the HAL packages, since usually the code has to be platform-specific. There are a number of options provided within the kernel related to slightly higher-level concepts, for example Delayed Service Routines. </description>
  </feature>
  <feature>
   <id>CYGIMP_KERNEL_INTERRUPTS_DSRS</id>
   <description>In eCos the recommended way to handle device interrupts is to do a minimum amount of work inside the low level interrupt handler itself, and instead do as much as possible in a Delayed Service Routine or DSR. If an application does not make use of DSRs directly or indirectly then it is possible to disable the DSR support completely, which reduces the overheads of context switches and interrupt handling. Note that the kernel real-time clock makes use of DSRs, as do many of the device drivers. </description>
  </feature>
  <feature>
   <id>CYGIMP_KERNEL_INTERRUPTS_DSRS_LIST</id>
   <description>When DSR support is enabled the kernel must keep track of all the DSRs that are pending. This information can be kept in a fixed-size table or in a linked list. The list implementation requires that the kernel disable interrupts for a very short period of time outside interrupt handlers, but there is no possibility of a table overflow occurring. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_INTERRUPTS_DSRS_LIST_FIFO</id>
   <description>When this option is set, DSRs are scheduled in the natural FIFO (first in, first out) order, otherwise they are scheduled in LIFO (last in, first out) order. Applications should not rely on any particular order of scheduling of DSRs. LIFO scheduling is kept for backward compatibility only and is not recommended as it may lead to high (up to 2 times higher then FIFO) IRQ-to-DSR latencies at some (typically rare) conditions. If unsure, leave this set. </description>
  </feature>
  <feature>
   <id>CYGIMP_KERNEL_INTERRUPTS_DSRS_TABLE</id>
   <description>When DSR support is enabled the kernel must keep track of all the DSRs that are pending. This information can be kept in a fixed-size table or in a linked list. The table implementation involves a very small risk of overflow at run-time if a given interrupt source is able to have more than one pending DSR. However it has the advantage that the kernel does not need to disable interrupts outside interrupt handlers. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_INTERRUPTS_DSRS_TABLE_SIZE</id>
   <description>When DSR support is enabled the kernel must keep track of all the DSRs that are pending. One approach involves a fixed-size table, which involves a very small risk of overflow at run-time. By increasing the table size it is possible to reduce this risk. </description>
  </feature>
  <feature>
   <id>CYGIMP_KERNEL_INTERRUPTS_CHAIN</id>
   <description>Interrupts can be attached to vectors either singly, or be chained together. The latter is necessary if there is no way of discovering which device has interrupted without inspecting the device itself. It can also reduce the amount of RAM needed for interrupt decoding tables and code. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_EXCEPTIONS</id>
   <description>In the context of the eCos kernel exceptions are unexpected events detected by the hardware, for example an attempt to execute an illegal instruction. There is no relation with other forms of exception, for example the catch and throw facilities of languages like C++. It is possible to disable all support for exceptions and thus save some memory. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_EXCEPTIONS_DECODE</id>
   <description>On targets where several different types of exception are possible, for example executing an illegal instruction and division by zero, it is possible for the kernel to do some decoding of the exception type and deliver the different types of exception to different handlers in the application code. Alternatively the kernel can simply pass all exceptions directly to application code, leaving the decoding to be done by the application </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_EXCEPTIONS_GLOBAL</id>
   <description>In the context of the eCos kernel exceptions are unexpected events detected by the hardware, for example an attempt to execute an illegal instruction. If the kernel is configured to support exceptions then two implementations are possible. The default implementation involves a single set of exception handlers that are in use for the entire system. The alternative implementation allows different exception handlers to be specified for each thread. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_SCHED</id>
   <description>The eCos kernel provides a choice of schedulers. In addition there are a number of configuration options to control the detailed behaviour of these schedulers. </description>
  </feature>
  <feature>
   <id>CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES</id>
   <description>Not all schedulers allow mutiple threads to use the same priority. That property is signalled via this option, allowing scheduler and tests to behave accordingly. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SCHED_MLQUEUE</id>
   <description>The multi-level queue scheduler supports multiple priority levels and multiple threads at each priority level. Preemption between priority levels is automatic. Timeslicing within a given priority level is controlled by a separate configuration option. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_TRACE_TIMESLICE</id>
   <description>When tracing is enabled, output trace messages every timeslice. This can be quite verbose so is disabled by default. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SCHED_BITMAP</id>
   <description>The bitmap scheduler supports multiple priority levels but only one thread can exist at each priority level. This means that scheduling decisions are very simple and hence the scheduler is efficient. Preemption between priority levels is automatic. Timeslicing within a given priority level is irrelevant since there can be only one thread at each priority level. </description>
  </feature>
  <feature>
   <id>CYGPRI_KERNEL_SCHED_IMPL_HXX</id>
   <description>This option sets a preprocessor symbol which names the header file for the selected scheduler. It is used internally by the common scheduler code to include the correct header file. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_SCHED_PRIORITIES</id>
   <description>This option controls the number of priority levels that are available. For some types of scheduler including the bitmap scheduler this may impose an upper bound on the number of threads in the system. For other schedulers such as the mlqueue scheduler the number of threads is independent from the number of priority levels. Note that the lowest priority level is normally used only by the idle thread, although application threads can run at this priority if necessary. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_SCHED_BITMAP_SIZE</id>
   <description>This option automatically defines the size of bitmap used to track occupied priority levels. </description>
  </feature>
  <feature>
   <id>CYGIMP_KERNEL_SCHED_SORTED_QUEUES</id>
   <description>With this option enabled, threads queued in a thread queue will be dequeued in priority order, rather than first in, first out (FIFO). Threads of equal priority are dequeued oldest first. The only exception is the scheduler run queues where order is less important as each is already sorted by priority. Note that this makes the thread queueing less deterministic. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SCHED_TIMESLICE</id>
   <description>Some schedulers including the mlqueue scheduler support timeslicing. This means that the kernel will check regularly whether or not there is another runnable thread with the same priority, and if there is such a thread there will be an automatic context switch. Not all applications require timeslicing, for example because every thread performs a blocking operation regularly. For these applications it is possible to disable timeslicing, which reduces the overheads associated with timer interrupts. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_SCHED_TIMESLICE_TICKS</id>
   <description>Assuming timeslicing is enabled, how frequently should it take place? The value of this option corresponds to the number of clock ticks that should occur before a timeslice takes place, so increasing the value reduces the frequency of timeslices. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SCHED_TIMESLICE_ENABLE</id>
   <description>This option makes timslicing a per-thread runtime option. When enabled, threads may have timeslicing turned on or off dynamically. This is generally used by higher level APIs (such as POSIX) to implement differing scheduling policies. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SCHED_ASR_SUPPORT</id>
   <description>This component controls support for Asynchronous Service Routines (ASRs). This is a function that may be called from the scheduler when it has just exited the scheduler lock. This is primarily for use by API compatibility layers. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SCHED_ASR_GLOBAL</id>
   <description>This option controls whether the ASR function is shared by all threads, or whether each thread may have its own ASR function. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SCHED_ASR_DATA_GLOBAL</id>
   <description>This option controls whether the ASR data is shared by all threads, or whether each thread may have its own ASR data. This is independent of the previous option because it may be useful to pass per-thread data to a shared ASR function. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_COUNTERS</id>
   <description>The counter objects provided by the kernel provide an abstraction of the clock facility that is generally provided. Application code can associate alarms with counters, where an alarm is identified by the number of ticks until it triggers, the action to be taken on triggering, and whether or not the alarm should be repeated. </description>
  </feature>
  <feature>
   <id>CYGVAR_KERNEL_COUNTERS_CLOCK</id>
   <description>On all current target systems the kernel can provide a real-time clock. This clock serves two purposes. First it is necessary to support clock and alarm related functions. Second it is needed to implement timeslicing in some of the schedulers including the mlqueue scheduler. If the application does not require any of these facilities then it is possible to disable the real time clock support completely. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_COUNTERS_CLOCK_ISR_PRIORITY</id>
   <description>The implementation of the kernel's real-time clock typically involves installing an interrupt handler on a suitable hardware timer. This option controls the priority level used for that interrupt. On most platforms the value is not important because the clock ISR leaves most of the work to be done by the DSR. However some processors have interrupt controllers with special requirements for the interrupt priorities, in which case application developers must be able to manipulate the clock's priority. </description>
  </feature>
  <feature>
   <id>CYGIMP_KERNEL_COUNTERS_SINGLE_LIST</id>
   <description>There are two different implementations of the counter objects. The first implementation stores all alarms in a single linked list. The alternative implementation uses a table of linked lists. A single list is more efficient in terms of memory usage and is generally adequate when the application only makes use of a small number of alarms. </description>
  </feature>
  <feature>
   <id>CYGIMP_KERNEL_COUNTERS_MULTI_LIST</id>
   <description>There are two different implementations of the counter objects. The first implementation stores all alarms in a single linked list. The alternative implementation uses a table of linked lists, with the size of the table being a separate configurable option. For more complicated operations it is better to have a table of lists since this reduces the amount of computation whenever the timer goes off. Assuming a table size of 8 (the default value) on average the timer code will only need to check 1/8 of the pending alarms instead of all of them. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_COUNTERS_MULTI_LIST_SIZE</id>
   <description>If counters are implemented using an array of linked lists then this option controls the size of the array. A larger size reduces the amount of computation that needs to take place whenever the timer goes off, but requires extra memory. </description>
  </feature>
  <feature>
   <id>CYGIMP_KERNEL_COUNTERS_SORT_LIST</id>
   <description>Sorting the counter lists reduces the amount of work that has to be done when a counter tick is processed, since the next alarm to expire is always at the front of the list. However, it makes adding an alarm to the list more expensive since a search must be done for the correct place to put it. Many alarms are used to implement timeouts, which seldom trigger, so it is worthwhile optimizing this case. For this reason sorted list are disabled by default. </description>
  </feature>
  <feature>
   <id>CYGVAR_KERNEL_COUNTERS_CLOCK_LATENCY</id>
   <description>Measure the interrupt latency as seen by the real-time clock timer interrupt. This requires hardware support, defined by the HAL_CLOCK_LATENCY() macro. </description>
  </feature>
  <feature>
   <id>CYGVAR_KERNEL_COUNTERS_CLOCK_DSR_LATENCY</id>
   <description>Measure the DSR latency as seen by the real-time clock timer interrupt. This requires hardware support, defined by the HAL_CLOCK_LATENCY() macro. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_COUNTERS_RTC_RESOLUTION</id>
   <description>This option automatically defines the tuple which is used to initialize the RTC resolution, consisting of a numerator and denominator. The values of the numerator and denominator are defined by the HAL. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_COUNTERS_RTC_PERIOD</id>
   <description>This option defines the RTC period to be used in setting the system clock hardware. It is essentially an alias for CYGNUM_HAL_RTC_PERIOD, which is defined in the HAL. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_THREADS</id>
   <description>There are a number of configuration options related to the implementation of threads, for example whether or not the eCos kernel supports per-thread data. </description>
  </feature>
  <feature>
   <id>CYGFUN_KERNEL_THREADS_TIMER</id>
   <description>This option controls whether or not the kernel should support per-thread clock and alarm related functions. Also some of the synchronization primitives such as semaphore and condition variable timed wait operations require per-thread timer support. If none of these facilities are required then the option can be disabled. </description>
  </feature>
  <feature>
   <id>CYGVAR_KERNEL_THREADS_NAME</id>
   <description>Threads may optionally be supplied with a name string that is used to identify them during debugging. This name is only present if `this option is defined. Disabling it reduces both code and data size. </description>
  </feature>
  <feature>
   <id>CYGVAR_KERNEL_THREADS_LIST</id>
   <description>Threads may optionally be placed on a housekeeping list so that all threads may be located easily. This is useful mainly in conjunction with source-level debugging. </description>
  </feature>
  <feature>
   <id>CYGFUN_KERNEL_THREADS_STACK_LIMIT</id>
   <description>This option makes the kernel keep track of the lower limit on each thread's stack. It allows the kernel to adjust the lower limit, thus making space for per-thread data. Note that it does not imply any form of run-time stack overflow checking. </description>
  </feature>
  <feature>
   <id>CYGFUN_KERNEL_THREADS_STACK_CHECKING</id>
   <description>This option enables a variety of checks for stack overflow including signatures at the top and base of thread stacks, which are asserted for correctness whenever a thread switches. </description>
  </feature>
  <feature>
   <id>CYGFUN_KERNEL_ALL_THREADS_STACK_CHECKING</id>
   <description>This option enables more active checking of all threads for wrongdoing. In theory, checking threads other than the old and new executing threads in a thread-switch is pointless, because no other thread has run, so no other stack can be exceeded. But errors such as memory scribbling, dangling pointers, overlapping use of store or errors accessing objects adjacent to a stack which can be very hard to find can be detected this way, saving debug time. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_THREADS_STACK_CHECK_DATA_SIZE</id>
   <description>This is the size of the area reserved for a signature at the top and bottom of all stacks. It also provides a buffer zone for detecting overflow before external objects are corrupted, hence the ability to vary it here. But if you are short of stack, increasing this value will make the overflow more, not less likely, of course. </description>
  </feature>
  <feature>
   <id>CYGFUN_KERNEL_THREADS_STACK_MEASUREMENT</id>
   <description>This option allows measurement of each thread's stack by initializing it to a predefined value at thread creation time. Later use of the cyg_thread_measure_stack_usage() function allows the maximum stack usage of the thread so far to be obtained. Note that this is not necessarily the true maximum stack usage that the thread will ever use since all that has been measured is the stack usage corresponding to the code path followed this time, and not the code path that may be followed in future. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_THREADS_STACK_MEASUREMENT_VERBOSE_EXIT</id>
   <description>This will output the measured stack usage on the diagnostic output when a thread exits. </description>
  </feature>
  <feature>
   <id>CYGVAR_KERNEL_THREADS_DATA</id>
   <description>It is possible for the kernel to support per-thread data, in other words an area of memory specific to each thread which can be used to store data for that thread. This per-thread data can be used by applications or by other packages such as the ISO C library. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_THREADS_DATA_MAX</id>
   <description>It is possible for the kernel to support per-thread data, in other words an area of memory specific to each thread which can be used to store data for that thread. This per-thread data can be used by applications or by other packages such as the ISO C library. This configuration option controls the number of words of per-thread data that the kernel will allow. In the current implementation a bitmask is used to identify used per-thread data slots and so the maximum legal value must remain 32. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_THREADS_DATA_ALL</id>
   <description>Per thread data options. Per thread data support is based loosely on that defined by POSIX. Each thread has an array of slots, up to CYGNUM_KERNEL_THREADS_DATA_MAX, that may contain data. Some of the slots have been preallocated to specific packages. Others may be allocated dynamically. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_THREADS_DATA_KERNEL</id>
   <description>This option defines the index of a per-thread data slot which is reserved by the eCos kernel for private use. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_THREADS_DATA_ITRON</id>
   <description>This option defines the index of a per-thread data slot which is reserved by the uITRON compatibility layer for private use. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_THREADS_DATA_ERRNO</id>
   <description>This option defines the index of a per-thread data slot which is reserved for use by an errno variable. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_THREADS_DATA_POSIX</id>
   <description>This option defines the index of a per-thread data slot which is reserved by POSIX for private use. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_THREADS_DESTRUCTORS</id>
   <description>This option enables support for registered destructor functions to be called on thread exit. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_THREADS_DESTRUCTORS</id>
   <description>This option gives the number of possible destructors allowed. Increasing this will increase the size of every thread control structure if per-thread destructors are enabled. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_THREADS_DESTRUCTORS_PER_THREAD</id>
   <description>Enabling this option makes the thread destructors a per-thread property, with each thread having its own list of destructors. Disabling this option makes the thread destructor list global so all threads have the same destructors. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_THREADS_IDLE_STACK_SIZE</id>
   <description>This configuration option specifies the stack size in bytes for the idle thread. Unless the HAL is configured to use a separate interrupt stack this size must be sufficient to meet the requirements of all interrupt handlers - these requirements are cumulative if nested interrupted are enabled. Depending on the target architecture, the stack size typically has to be a multiple of eight or sixteen bytes. This will be overridden where it is used if the architectural HAL requires a minimum stack size to handle interrupts correctly. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_MAX_SUSPEND_COUNT_ASSERT</id>
   <description>This option provides for an assertion that the count value for counted thread suspends do not exceed set limits. This is to help with debugging, to allow a runaway loop, for example, to be detected more easily. If the option is not defined, no assert is included. Whether asserts are themselves included depends on infrastructure configury in infra.h </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_MAX_COUNTED_WAKE_COUNT_ASSERT</id>
   <description>This option provides for an assertion that the count value for counted thread wakeups do not exceed set limits. This is to help with debugging, to allow a runaaway loop, for example, to be detected more easily. If the option is not defined, no assert is included. Whether asserts are themselves included depends on infrastructure configury in infra.h </description>
  </feature>
  <feature>
   <id>CYGIMP_IDLE_THREAD_YIELD</id>
   <description>If the scheduler configuration only has a single priority level, then the idle thread must yield each time around its loop. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_SYNCH</id>
   <description>The eCos kernel supports a number of different synchronization primitives such as mutexes, semaphores, condition variables, and message boxes. There are configuration options to control the exact behaviour of some of these synchronization primitives. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL</id>
   <description>This component controls the protocols used to protect mutexes against priority inversion. If this option is enabled it defines which algorithm is used to implement this protection. At present only one such algorithm is defined: "SIMPLE". The implementation will only work in the mlqueue scheduler, and it does not handle the rare case of nested mutexes completely correctly. However it is both fast and deterministic. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_INHERIT</id>
   <description>This option enables priority inheritance protocol. This protocol causes the owner of a mutex to be executed at the highest priority of the threads waiting for access to the mutex. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_CEILING</id>
   <description>This option enables priority ceiling protocol. This protocol causes the owner of a mutex to be executed at a priority associated with the mutex. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT_PRIORITY</id>
   <description>This option defines the default priority ceiling to be used if the chosen default priority inversion protocol is priority ceoptioniling protocol. The default value for this is zero, making all such mutexes boost threads to the maximum priority. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_NONE</id>
   <description>This option enables the ability to have no priority inversion protocol. It is equivalent to disabling the priority inversion protocol at the top level, but is necessary for the runtime and default selection options. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DEFAULT</id>
   <description>This option defines the default inversion protocol used for mutexes that are created without an explicit protocol being specified. The protocol chosen by default is to use priority inheritance if it is present otherwise priority ceiling, or none if neither is present. </description>
  </feature>
  <feature>
   <id>CYGSEM_KERNEL_SYNCH_MUTEX_PRIORITY_INVERSION_PROTOCOL_DYNAMIC</id>
   <description>This option controls whether the priority inversion protocol used by a mutex can be specified when that mutex is created. </description>
  </feature>
  <feature>
   <id>CYGIMP_MBOX_USE_MBOXT_PLAIN</id>
   <description>Use the plain mboxt implementation instead of the mboxt2 implementation. The mboxt2 version is designed to provide semantics compatible with UITRON, the plain implementation is adquate in most other situations. </description>
  </feature>
  <feature>
   <id>CYGMFN_KERNEL_SYNCH_MBOXT_PUT_CAN_WAIT</id>
   <description>Message boxes can support three different versions of the put-message operation. The first is tryput(), which will fail if the message box is already full. The other two are the ordinary put() function which will block if the message box is full, and a timed put() operation which will block for upto a certain length of time if the message box is currently full. The blocking versions require extra memory in the message box data structure and extra code in the other message box functions, so they can be disabled if the application does not require them. If this option is enabled then the system will always provide the blocking put() function, and it will also provide the timed put() function if thread timers are enabled. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_SYNCH_MBOX_QUEUE_SIZE</id>
   <description>This configuration option controls the number of messages that can be queued in a message box before a non-blocking put() operation will fail or a blocking put() operation will block. The cost in memory is one pointer per message box for each possible message. </description>
  </feature>
  <feature>
   <id>CYGMFN_KERNEL_SYNCH_CONDVAR_TIMED_WAIT</id>
   <description>This option enables the condition variable timed wait facility. </description>
  </feature>
  <feature>
   <id>CYGMFN_KERNEL_SYNCH_CONDVAR_WAIT_MUTEX</id>
   <description>This option enables the condition variable explicit mutex wait facility. By default condition variables in eCos are created with a statically associated mutex. This option permits wait (and timed wait if CYGMFN_KERNEL_SYNCH_CONDVAR_TIMED_WAIT is enabled) to provide a different mutex as an argument. This makes no difference to the semantics the wait operation except that a different mutex will be used during it. </description>
  </feature>
  <feature>
   <id>CYGIMP_KERNEL_SYNCH_MQUEUE_NOT_INLINE</id>
   <description>With this option disabled, the 'mqueue' message queue implementation provides most of its implementation via inlines. However this can adversely affect code size in application that make lots of mqueue calls from different places, so enabling this option provides non-inline versions to be used instead. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_INSTRUMENT</id>
   <description>The current release of the kernel contains an initial version of instrumentation support. The various parts of the kernel will invoke instrumentation routines whenever appropriate events occur, and these will be stored in a circular buffer for later reference. </description>
  </feature>
  <feature>
   <id>CYGVAR_KERNEL_INSTRUMENT_EXTERNAL_BUFFER</id>
   <description>In most circumstances the kernel should provide the instrumentation circular buffer itself. Occasionally application code may wish to provide the buffer instead, giving the application code more convenient access to the buffer. This also makes it possible to put the circular buffer in special areas of memory, for example a region that is shared with the host. </description>
  </feature>
  <feature>
   <id>CYGNUM_KERNEL_INSTRUMENT_BUFFER_SIZE</id>
   <description>If kernel instrumentation is enabled then the instrumentation data goes into a circular buffer. A larger buffer allows more data to be stored, but at a significant cost in memory. The value of this option corresponds to the number of entries in the table, and typically each entry will require 16 bytes of memory. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_BUFFER_WRAP</id>
   <description>When the instrumentation buffer is full it can either be restarted from the beginning, overwriting older data, or it can stop at the end. The former is useful if you want to look at the last entries made while the latter is useful if you want to look at the first few. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_FLAGS</id>
   <description>The kernel can either collect all instrumentation events, or it can filter out events at runtime based on a set of flags. For example it would be possible to decide at runtime that only scheduler and interrupt instrumentation flags are of interest and that all other flags should be ignored. This flag mechanism involves extra code and processor cycle overhead in the instrumentation code, so it can be disabled if the application developer is interested in all instrumentation events. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_SCHED</id>
   <description>It is possible to perform selective instrumentation at run-time. It is also possible to disable instrumentation in various kernel components at compile-time, thus reducing the code size overheads. This option controls whether or not instrumentation support is compiled into the scheduling code. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_THREAD</id>
   <description>It is possible to perform selective instrumentation at run-time. It is also possible to disable instrumentation in various kernel components at compile-time, thus reducing the code size overheads. This option controls whether or not instrumentation support is compiled into the code that manipulates threads. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_INTR</id>
   <description>It is possible to perform selective instrumentation at run-time. It is also possible to disable instrumentation in various kernel components at compile-time, thus reducing the code size overheads. This option controls whether or not instrumentation support is compiled into the interrupt handling code. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_MUTEX</id>
   <description>It is possible to perform selective instrumentation at run-time. It is also possible to disable instrumentation in various kernel components at compile-time, thus reducing the code size overheads. This option controls whether or not instrumentation support is compiled into the mutex code. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_CONDVAR</id>
   <description>It is possible to perform selective instrumentation at run-time. It is also possible to disable instrumentation in various kernel components at compile-time, thus reducing the code size overheads. This option controls whether or not instrumentation support is compiled into the condition variable code. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_BINSEM</id>
   <description>It is possible to perform selective instrumentation at run-time. It is also possible to disable instrumentation in various kernel components at compile-time, thus reducing the code size overheads. This option controls whether or not instrumentation support is compiled into the binary semaphore code. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_CNTSEM</id>
   <description>It is possible to perform selective instrumentation at run-time. It is also possible to disable instrumentation in various kernel components at compile-time, thus reducing the code size overheads. This option controls whether or not instrumentation support is compiled into the counting semaphore code. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_MBOXT</id>
   <description>It is possible to perform selective instrumentation at run-time. It is also possible to disable instrumentation in various kernel components at compile-time, thus reducing the code size overheads. This option controls whether or not instrumentation support is compiled into the message box code. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_CLOCK</id>
   <description>It is possible to perform selective instrumentation at run-time. It is also possible to disable instrumentation in various kernel components at compile-time, thus reducing the code size overheads. This option controls whether or not instrumentation support is compiled into the real-time clock code. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_ALARM</id>
   <description>It is possible to perform selective instrumentation at run-time. It is also possible to disable instrumentation in various kernel components at compile-time, thus reducing the code size overheads. This option controls whether or not instrumentation support is compiled into the code related to alarm operations. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_SMP</id>
   <description>It is possible to perform selective instrumentation at run-time. It is also possible to disable instrumentation in various kernel components at compile-time, thus reducing the code size overheads. This option controls whether or not instrumentation support is compiled into the code related to SMP operations. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_USER</id>
   <description>It is possible to perform selective instrumentation at run-time. It is also possible to disable instrumentation in various kernel components at compile-time, thus reducing the code size overheads. This option controls whether or not application-level instrumentation gets compiled in. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_MSGS</id>
   <description>Include code which will convert the instrument type field into a more human understandable string </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_MSGS_BUILD_HEADERFILE</id>
   <description>Make (using a shell script) include/cyg/kernel/instrument_desc.h in your build tree; this is normally simply copied from the repository. If you make a permanent change to include/instrmnt.h, such that instrument_desc.h needs updating, it's up to you to first delete the master file ECOS_REPOSITORY/kernel/VERSION/include/instrument_desc.h in your source repository, make the new version by enabling this option then copy the new file back from your build place to its source in ECOS_REPOSITORY/kernel/VERSION/include/instrument_desc.h and/or commit this to any version control system that you use. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_INSTRUMENT_BUILD_HOST_DUMP</id>
   <description>Generate a host program which can dump the instrumentation data in a human readable format. You have to somehow get the instrumentation buffer into a file on the host. 'Exercise for the reader' as university lecturers tend to say. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_DEBUG</id>
   <description>If the source level debugger gdb is to be used for debugging application code then it may be necessary to configure in support for this in the kernel. </description>
  </feature>
  <feature>
   <id>CYGDBG_KERNEL_DEBUG_GDB_THREAD_SUPPORT</id>
   <description>This option enables some extra kernel code which is needed to support multi-threaded source level debugging. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_API</id>
   <description>The eCos kernel is implemented in C++, so a C++ interface to the kernel is always available. There is also an optional C API. Additional API's may be provided in future versions. </description>
  </feature>
  <feature>
   <id>CYGFUN_KERNEL_API_C</id>
   <description>The eCos kernel is implemented in C++, but there is an optional C API for use by application code. This C API can be disabled if the application code does not invoke the kernel directly, but instead uses higher level code such as the uITRON compatibility layer. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the eCos kernel. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the eCos kernel. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_KERNEL_TESTS</id>
   <description>This option specifies the set of tests for the eCos kernel. </description>
  </feature>
  <feature>
   <id>CYGPKG_MEMALLOC</id>
   <description>This package provides memory allocator infrastructure required for dynamic memory allocators, including the ISO standard malloc interface. It also contains some sample implementations. </description>
  </feature>
  <feature>
   <id>CYGPKG_MEMALLOC_ALLOCATORS</id>
   <description>This component contains configuration options related to the various memory allocators available. </description>
  </feature>
  <feature>
   <id>CYGPKG_MEMALLOC_ALLOCATOR_FIXED</id>
   <description>This component contains configuration options related to the fixed block memory allocator. </description>
  </feature>
  <feature>
   <id>CYGSEM_MEMALLOC_ALLOCATOR_FIXED_THREADAWARE</id>
   <description>With this option enabled, this allocator will be made thread-safe. Additionally allocation functions are made available that allow a thread to wait until memory is available. </description>
  </feature>
  <feature>
   <id>CYGPKG_MEMALLOC_ALLOCATOR_VARIABLE</id>
   <description>This component contains configuration options related to the simple variable block memory allocator. This allocator is not very fast, and in particular does not scale well with large numbers of allocations. It is however very compact in terms of code size and does not have very much overhead per allocation. </description>
  </feature>
  <feature>
   <id>CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_THREADAWARE</id>
   <description>With this option enabled, this allocator will be made thread-safe. Additionally allocation functions are added that allow a thread to wait until memory are made available that allow a thread to wait until memory is available. </description>
  </feature>
  <feature>
   <id>CYGSEM_MEMALLOC_ALLOCATOR_VARIABLE_COALESCE</id>
   <description>The variable-block memory allocator can perform coalescing of memory whenever the application code releases memory back to the pool. This coalescing reduces the possibility of memory fragmentation problems, but involves extra code and processor cycles. </description>
  </feature>
  <feature>
   <id>CYGPKG_MEMALLOC_ALLOCATOR_DLMALLOC</id>
   <description>This component contains configuration options related to the port of Doug Lea's memory allocator, normally known as dlmalloc. dlmalloc has a reputation for being both fast and space-conserving, as well as resisting fragmentation well. It is a common choice for a general purpose allocator and has been used in both newlib and Linux glibc. </description>
  </feature>
  <feature>
   <id>CYGDBG_MEMALLOC_ALLOCATOR_DLMALLOC_DEBUG</id>
   <description>Doug Lea's malloc implementation has substantial amounts of internal checking in order to verify the operation and consistency of the allocator. However this imposes substantial overhead on each operation. Therefore this checking may be individually disabled. </description>
  </feature>
  <feature>
   <id>CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_THREADAWARE</id>
   <description>With this option enabled, this allocator will be made thread-safe. Additionally allocation functions are made available that allow a thread to wait until memory is available. </description>
  </feature>
  <feature>
   <id>CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_SAFE_MULTIPLE</id>
   <description>Having this option disabled allows important implementation structures to be declared as a single static instance, allowing faster access. However this would fail if there is more than one instance of the dlmalloc allocator class. Therefore this option can be enabled if multiple instances are required. Note: as a special case, if this allocator is used as the implementation of malloc, and it can be determined there is more than one malloc pool, then this option will be silently enabled. </description>
  </feature>
  <feature>
   <id>CYGIMP_MEMALLOC_ALLOCATOR_DLMALLOC_USE_MEMCPY</id>
   <description>This may be used to control whether memset() and memmove() are used within the implementation. The alternative is to use some macro equivalents, which have been reported to be faster in some circumstances. The use of "MEMCPY" in the CDL option name is an anachronism and only present for backwards compatibility. </description>
  </feature>
  <feature>
   <id>CYGNUM_MEMALLOC_ALLOCATOR_DLMALLOC_ALIGNMENT</id>
   <description>This option controls the minimum alignment that the allocated memory blocks are aligned on, specified as 2^N. Note that using large mininum alignments can lead to excessive memory wastage. </description>
  </feature>
  <feature>
   <id>CYGPKG_MEMALLOC_ALLOCATOR_SEPMETA</id>
   <description>This component contains configuration options related to the variable block memory allocator with separate metadata. </description>
  </feature>
  <feature>
   <id>CYGSEM_MEMALLOC_ALLOCATOR_SEPMETA_THREADAWARE</id>
   <description>With this option enabled, this allocator will be made thread-safe. Additionally allocation functions are made available that allow a thread to wait until memory is available. </description>
  </feature>
  <feature>
   <id>CYGFUN_MEMALLOC_KAPI</id>
   <description>This option must be enabled to provide the extensions required to support integration into the kernel C API. </description>
  </feature>
  <feature>
   <id>CYGSEM_MEMALLOC_MALLOC_ZERO_RETURNS_NULL</id>
   <description>This option controls the behavior of malloc(0) ( or calloc with either argument 0 ). It is permitted by the standard to return either a NULL pointer or a unique pointer. Enabling this option forces a NULL pointer to be returned. </description>
  </feature>
  <feature>
   <id>CYGSEM_MEMALLOC_INVOKE_OUT_OF_MEMORY</id>
   <description>Whenever the system runs out of memory, it invokes this function before either going to sleep waiting for memory to become available or returning failure. </description>
  </feature>
  <feature>
   <id>CYGPKG_MEMALLOC_MALLOC_ALLOCATORS</id>
   <description>This component enables support for dynamic memory allocation as supplied by the functions malloc(), free(), calloc() and realloc(). As these functions are often used, but can have quite an overhead, disabling them here can ensure they cannot even be used accidentally when static allocation is preferred. Within this component are various allocators that can be selected for use as the underlying implementation of the dynamic allocation functions. </description>
  </feature>
  <feature>
   <id>CYGBLD_MEMALLOC_MALLOC_EXTERNAL_HEAP_H</id>
   <description>This option allows other components in the system to override the default system provision of heap memory pools. This should be set to a header which provides the equivalent definitions to &lt;pkgconf/heaps.hxx&gt;. </description>
  </feature>
  <feature>
   <id>CYGBLD_MEMALLOC_MALLOC_EXTERNAL_JOIN_H</id>
   <description>The default implementation of joining multiple heaps is fine for the case where there are multiple disjoint memory regions of the same type. However, in a system there might be e.g. a small amount of internal SRAM and a large amount of external DRAM. The SRAM is faster and the DRAM is slower. An application can implement some heuristic to choose which pool to allocate from. This heuristic can be highly application specific. </description>
  </feature>
  <feature>
   <id>CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER</id>
   <description>Memory allocator implementations that are capable of being used underneath malloc() must be instantiated. The code to do this is set in this option. It is only intended to be set by the implementation, not the user. </description>
  </feature>
  <feature>
   <id>CYGIMP_MEMALLOC_MALLOC_VARIABLE_SIMPLE</id>
   <description>This causes malloc() to use the simple variable block allocator. </description>
  </feature>
  <feature>
   <id>CYGIMP_MEMALLOC_MALLOC_DLMALLOC</id>
   <description>This causes malloc() to use a version of Doug Lea's malloc (dlmalloc) as the underlying implementation. </description>
  </feature>
  <feature>
   <id>CYGNUM_MEMALLOC_FALLBACK_MALLOC_POOL_SIZE</id>
   <description>If *no* heaps are configured in your memory layout, dynamic memory allocation by malloc() and calloc() must be from a fixed-size, contiguous memory pool (note here that it is the pool that is of a fixed size, but malloc() is still able to allocate variable sized chunks of memory from it). This option is the size of that pool, in bytes. Note that not all of this is available for programs to use - some is needed for internal information about memory regions, and some may be lost to ensure that memory allocation only returns memory aligned on word (or double word) boundaries - a very common architecture constraint. </description>
  </feature>
  <feature>
   <id>CYGPKG_MEMALLOC_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_MEMALLOC_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building this package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_MEMALLOC_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building this package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_MEMALLOC_TESTS</id>
   <description>This option specifies the set of tests for this package. </description>
  </feature>
  <feature>
   <id>CYGPKG_ISOINFRA</id>
   <description>eCos supports implementations of ISO C libraries and POSIX implementations. This package provides infrastructure used by all such implementations. </description>
  </feature>
  <feature>
   <id>CYGINT_ISO_MAIN_STARTUP</id>
   <description>Implementations of this interface arrange for a user-supplied main() to be called in an ISO compatible environment. </description>
  </feature>
  <feature>
   <id>CYGINT_ISO_ENVIRON</id>
   <description>Implementations of this interface provide the environ variable required by POSIX. </description>
  </feature>
  <feature>
   <id>CYGBLD_ISO_STDIO_STREAMS_HEADER</id>
   <description>This header file must define stdin, stdout and stderr. </description>
  </feature>
  <feature>
   <id>CYGBLD_ISO_STDIO_FILEOPS_HEADER</id>
   <description>This header controls the file system operations on a file such as remove(), rename(), tmpfile(), tmpnam() and associated constants. </description>
  </feature>
  <feature>
   <id>CYGBLD_ISO_STDIO_FILEACCESS_HEADER</id>
   <description>This header controls the file access operations such as fclose(), fflush(), fopen(), freopen(), setbuf(), setvbuf(), and associated constants. </description>
  </feature>
  <feature>
   <id>CYGINT_ISO_STRING_LOCALE_FUNCS</id>
   <description>This covers locale-dependent string functions such as strcoll() and strxfrm(). </description>
  </feature>
  <feature>
   <id>CYGBLD_ISO_STRING_LOCALE_FUNCS_HEADER</id>
   <description>This covers locale-dependent string functions such as strcoll() and strxfrm(). </description>
  </feature>
  <feature>
   <id>CYGINT_ISO_STRING_STRFUNCS</id>
   <description>This covers the other str*() functions defined by ISO C. </description>
  </feature>
  <feature>
   <id>CYGBLD_ISO_STRING_STRFUNCS_HEADER</id>
   <description>This covers the other str*() functions defined by ISO C. </description>
  </feature>
  <feature>
   <id>CYGBLD_ISO_SIGNAL_NUMBERS_HEADER</id>
   <description>This header provides the mapping of signal names (e.g. SIGBUS) to numbers. </description>
  </feature>
  <feature>
   <id>CYGINT_POSIX_REALTIME_SIGNALS</id>
   <description>This defines the POSIX feature test macro that indicates that the POSIX real time signals are present. </description>
  </feature>
  <feature>
   <id>CYGPKG_ISO_POSIX_FCNTL</id>
   <description>This covers the POSIX file control definitions, normally found in &lt;fcntl.h&gt; </description>
  </feature>
  <feature>
   <id>CYGPKG_ISO_POSIX_TYPES</id>
   <description>This covers the types required by POSIX to be in &lt;sys/types.h&gt; </description>
  </feature>
  <feature>
   <id>CYGPKG_ISO_EXTRA_TYPES</id>
   <description>This covers the extra types required by non-POSIX packages to be in &lt;sys/types.h&gt;. These would normally only be visible if _POSIX_SOURCE is not defined. </description>
  </feature>
  <feature>
   <id>CYGPKG_ISOINFRA_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_ISOINFRA_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the ISO C and POSIX infrastructure package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_ISOINFRA_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the ISO C and POSIX infrastructure package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC</id>
   <description>The packages under this package enable compatibility with the ISO C standard - ISO/IEC 9899:1990. This allows the user application to use well known standard C library functions, and in eCos starts a thread to invoke the user function main(). This package is a top-level placeholder to contain the implementations. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_I18N</id>
   <description>This package provides internationalization functions specified by the ISO C standard - ISO/IEC 9899:1990. These include locale-related functionality and &lt;ctype.h&gt; functionality. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_I18N_LOCALES</id>
   <description>These options determine which locales other than the "C" locale are supported and hence contribute to the size of the executable. </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_I18N_LOCALE_C_SJIS</id>
   <description>This option controls if the "C-SJIS" locale will be supported by setlocale(). The locale is a hybrid locale that is mostly the "C" locale with Japanese SJIS multibyte support added. </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_I18N_LOCALE_C_JIS</id>
   <description>This option controls if the "C-JIS" locale will be supported by setlocale(). The locale is a hybrid locale that is mostly the "C" locale with Japanese JIS multibyte support added. </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_I18N_LOCALE_C_EUCJP</id>
   <description>This option controls if the "C-EUCJP" locale will be supported by setlocale(). The locale is a hybrid locale that is mostly the "C" locale with Japanese EUCJP multibyte support added. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_I18N_NEWLIB_CTYPE</id>
   <description>This option enables the implementation of the ctype functions that comes with newlib. It is table driven and therefore exhibits different performance characteristics. It also offers a limited amount of binary compatibility with newlib so that programs linked against newlib ctype/locale do not need to be recompiled when linked with eCos. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_I18N_PER_THREAD_MB</id>
   <description>This option controls whether the multibyte character handling functions mblen(), mbtowc(), and wctomb(), have their state recorded on a per-thread basis rather than global. If this option is disabled, some per-thread space can be saved. Enabling this option will use three slots of kernel per-thread data. You should ensure you have enough slots configured for all your per-thread data. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_I18N_MAX_LOCALE_NAME_SIZE</id>
   <description>This option controls the maximum size of locale names and is used, among other things to instantiate a static string used as a return value from the setlocale() function. When requesting the current locale settings with LC_ALL, a string must be constructed to contain this data, rather than just returning a constant string. This string data is stored in the static string. This depends on the length of locale names, hence this option. If just the C locale is present, this option can be set as low as 2. </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_I18N_CTYPE_INLINES</id>
   <description>This option chooses whether the simple character classification and conversion functions (e.g. isupper(), isalpha(), toupper(), etc.) from &lt;ctype.h&gt; are available as inline functions. This may improve performance and as the functions are small, may even improve code size. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_I18N_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_I18N_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the C library. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_I18N_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the C library. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_I18N_TESTS</id>
   <description>This option specifies the set of tests for the C library i18n functions. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_SETJMP</id>
   <description>This package provides non-local jumps based on setjmp() and longjmp() in &lt;setjmp.h&gt; as specified by the ISO C standard - ISO/IEC 9899:1990. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_SETJMP_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_SETJMP_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building this package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_SETJMP_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building this package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_SETJMP_TESTS</id>
   <description>This option specifies the set of tests for this package. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STARTUP</id>
   <description>This package manages the control of the environment (in the general sense) that an application would require for full ISO C / POSIX compatibility, including a main() entry point supplied with arguments and an environment (as retrievable by the getenv() function). It also includes at the other end of things, what happens when main() returns or exit() is called. </description>
  </feature>
  <feature>
   <id>CYGINT_LIBC_STARTUP_EXTERNAL_INVOKE_MAIN_POSSIBLE</id>
   <description>Implementors of this interface show that they allow main() to be invoked elsewhere. </description>
  </feature>
  <feature>
   <id>CYGDAT_LIBC_ARGUMENTS</id>
   <description>This option allows the setting of the arguments to the main function. This only has any effect when cyg_iso_c_start() is used to start the ISO C compatibility. This will automatically invoke main() in an ISO C compatible fashion. This option is in fact used as argv, and so is an n-tuple of string constants. The final entry must be NULL. Conventionally if argv[0] is supplied, it is used to inform the program of its name. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STARTUP_CONTEXT</id>
   <description>This component describes the options available for what context main() is invoked in, such as in a thread etc. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_STARTUP_MAIN_INITCONTEXT</id>
   <description>With this option selected, main() will be called via cyg_user_start() (unless the program overrides the default cyg_user_start()). This means it is run in the context of the system initialization code, without the eCos kernel scheduler running, and using the startup stack. This means that any functions that may require interactions with a running kernel will not work (including libc functions, if configured to be thread safe for example), so you should restrict yourself to only calling fully re-entrant functions from within main() in this case. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_STARTUP_MAIN_THREAD</id>
   <description>With this option selected, main() is invoked from an eCos thread. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_MAIN_STACK_FROM_SYSTEM</id>
   <description>This option controls whether the stack of main()'s thread is provided by the application or provided by the system. When disabled, the application must declare a pointer variable cyg_libc_main_stack which is a pointer to an appropriately aligned region of memory. The application must also declare a variable of type `int' called cyg_libc_main_stack_size which contains the size of the stack in bytes. This must be a multiple of 8. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_MAIN_THREAD_PRIORITY</id>
   <description>This option is used to provide the thread priority which main()'s thread runs at. Be sure to check that this number is appropriate for the kernel scheduler chosen. Different kernel schedulers impose different restrictions on the usable priorities. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_STARTUP_MAIN_OTHER</id>
   <description>With this option selected, main() must be invoked by a separate package, or by the user. </description>
  </feature>
  <feature>
   <id>CYGINT_LIBC_STARTUP_MAIN_NO_STACK_SIZE</id>
   <description>This interface describes whether the stack size value set in this package is supported by the implementation that invokes main. If not, that option is disabled. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_MAIN_DEFAULT_STACK_SIZE</id>
   <description>This option sets the size of the stack used in the context that invokes main(). For example, with an eCos kernel, when the cyg_iso_c_start() function is used to invoke the user-supplied main() function in an ISO C compatible fashion, a separate thread is created to call main(). This option controls the size of that thread's stack, which is allocated in the BSS. It must be a multiple of 8. Note, a low number here may be overriden by the HAL if there is a minimum requirement to process interrupts etc. This option cannot be set if the implementation that invokes main() does not use it. </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_ATEXIT</id>
   <description>This option enables the use of the atexit() function, and ensure that the atexit handlers are invoked from within exit() as defined in the ISO C standard. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_ATEXIT_HANDLERS</id>
   <description>This option sets the number of functions that atexit() has room for. In other words, the number of separate atexit() calls that can be made before calling exit() or returning from main() ( in an environment controlled by cyg_iso_c_start() ). For strict compliance with the ISO C standard this should be at least 32. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_EXIT_CALLS_FFLUSH</id>
   <description>This option will ensure that all output streams are flushed when exitting using exit() as prescribed by the ISO C standard. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_EXIT_STOPS_SYSTEM</id>
   <description>If this option is enabled then _exit(), which is called from exit() which itself is called on return from main(), stops the eCos scheduler. For strict POSIX 1003.1 compatibility this would be the normal behaviour. To allow the thread to simply exit, without affecting other threads, simply leave this option disabled. If there is no eCos scheduler, then _exit() simply loops irrespective of the setting of this option. </description>
  </feature>
  <feature>
   <id>CYGDAT_LIBC_DEFAULT_ENVIRONMENT</id>
   <description>This option allows the setting of the default contents of the environment. This is in fact the contents of the global environment pointer char **environ defined by POSIX 1003.1. Strings must be of the form NAME=VALUE, and the final entry must be NULL. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_INVOKE_DEFAULT_STATIC_CONSTRUCTORS</id>
   <description>This option causes the C library to call static constructors with default priority from within the context of the main() thread, working with the co-operation of the HAL. This may be needed for environments that expect static constructors to be run in a thread context. Note that this uses an object with priority 65534. Therefore do not use priority 65534 for any other static objects with this option enabled. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STARTUP_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STARTUP_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building this package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STARTUP_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building this package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STARTUP_TESTS</id>
   <description>This option specifies the set of tests for this package. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDIO</id>
   <description>This package provides standard input/output functions associated with the header file &lt;stdio.h&gt; as specified by the ISO C standard - ISO/IEC 9899:1990. </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_STDIO_INLINES</id>
   <description>This option chooses whether some of the particularly simple functions from &lt;stdio.h&gt; are available as inline functions. This may improve performance, and as the functions are small, may even improve code size. </description>
  </feature>
  <feature>
   <id>FOPEN_MAX</id>
   <description>This option controls the guaranteed minimum number of simultaneously open files. The ISO C standard requires it to be defined (para 7.9.1), and if strictly compliant, it must be at least 8 (para 7.9.3). In practice it can be as low as 3 - for stdin, stdout and stderr. </description>
  </feature>
  <feature>
   <id>FILENAME_MAX</id>
   <description>This option defines the maximum allowed size of a filename in characters. The ISO C standard requires it to be defined (para 7.9.1). </description>
  </feature>
  <feature>
   <id>L_tmpnam</id>
   <description>This option defines the maximum allowed size of filenames for temporary files as generated by tmpnam(). It is measured in characters, and the ISO C standard requires it to be defined (para 7.9.1). </description>
  </feature>
  <feature>
   <id>TMP_MAX</id>
   <description>This option defines the minimum number of unique file names generated by tmpnam(). The ISO C standard requires it to be defined (para 7.9.1) and for ISO compliance it should be at least 25. Note that TMP_MAX names may not be generated if L_tmpnam is too small. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_STDIO_WANT_BUFFERED_IO</id>
   <description>This option controls whether input/output through the &lt;stdio.h&gt; functions is buffered. This may save some memory per file. It is equivalent to putting every file into non-buffered mode (_IONBF) through setvbuf(), except now it can never be altered back to buffered mode. Disabling buffering is strictly non-compliant with the ISO C standard. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_STDIO_BUFSIZE</id>
   <description>This option defines the default size of buffer used with calls to setbuf(), and is the default size for buffered streams that have not had either setbuf() or setvbuf() invoked on them. It is exactly equivalent to the standard constant BUFSIZ, except that it is 0 if CYGSEM_LIBC_STDIO_WANT_BUFFERED_IO is disabled. The ISO C standard requires this to be defined (para 7.9.1), and says it must be at least 256 (para 7.9.2). </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_STDIO_DYNAMIC_SETVBUF</id>
   <description>This option controls whether I/O buffers are implemented dynamically within the stdio implementation. Otherwise they will be static, and cannot be changed by setbuf()/setvbuf(). If they are static (i.e. this option is disabled), any attempt to use an arbitrary buffer size, or to pass a user-supplied buffer to setbuf() or setvbuf() will fail - the buffer is implemented internally as a static array taking the size of the configuration option BUFSIZ. The only exception is if a user buffer is not supplied, and the buffer size requested is less than BUFSIZ. In this case, the buffer will be configured to only use that amount of buffering. However the unused memory left over will NOT be freed. If this option is enabled, then setvbuf() can be used to assign a user supplied buffer to the stream. Either setting can be considered to be compliant with the ISO C standard. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_STDIO_SETVBUF_MALLOC</id>
   <description>This option controls whether buffers set by setbuf() and setvbuf() may be allocated using malloc(). </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_STDIO_ungetc</id>
   <description>This option controls whether ungetc() is supported. If not, then some space can be saved, and speed is improved. Note that you MUST have this defined if you want to use the scanf() family of functions. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDIO_OPEN</id>
   <description>fopen() and fclose() use dynamic memory allocation routines to allocate memory for new FILE structure pointers. If a malloc implementation is available, this option may be enabled to use fopen() and fclose(). If disabled, only the default console streams - stdin, stdout and stderr - will be available. </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_STDIO_OPEN_POSIX_FDFUNCS</id>
   <description>This identifies to the rest of the system whether the POSIX fdopen() and fileno() functions are implemented. </description>
  </feature>
  <feature>
   <id>CYGDAT_LIBC_STDIO_DEFAULT_CONSOLE</id>
   <description>This option allows you to choose the default console device. In the current implementation, all these devices begin with the prefix /dev/ and are followed by the name of a device. The name of the device depends on the device drivers you have configured in your system. For example, /dev/ttydiag could be the HAL diagnostic output pseudo-device, or /dev/tty0 could be your first serial driver, depending on your configuration. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDIO_FLOATING_POINT</id>
   <description>This component allows floating point support to be enabled in certain standard I/O functions. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_STDIO_PRINTF_FLOATING_POINT</id>
   <description>This option enables the use of floating point number output in the printf() family (i.e. printf(), sprintf(), vprintf(), etc.) of functions. A substantial amount of code space can be saved if this option is disabled. If it is disabled then floating point specifiers (%e, %f, %g) are ignored, and nothing is output. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_STDIO_SCANF_FLOATING_POINT</id>
   <description>This option enables the use of floating point number conversion in the scanf() family (i.e. scanf(), sscanf(), vscanf(), etc.) of functions. A substantial amount of code space can be saved if this option is disabled. If it is disabled then floating point specifiers (%e, %f, %g) are ignored, and nothing is converted. </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_STDIO_LONGLONG</id>
   <description>This option allows various functions in the C Standard I/O library to support the 'long long' datatype. Doing so will come with a noticeable code size penalty however. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_STDIO_THREAD_SAFE_STREAMS</id>
   <description>This option controls whether standard I/O streams are thread-safe. Having this option set allows the streams to be locked when accessed by multiple threads simultaneously. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDIO_FILEIO</id>
   <description>This CDL exists to control how the standard I/O functions interface to the underlying I/O system. Either using the File I/O package, or the generic I/O package which is used by fewer devices. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDIO_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDIO_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the C library. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDIO_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the C library. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDIO_TESTS</id>
   <description>This option specifies the set of tests for the C library stdio functions. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDLIB</id>
   <description>This package provides general utility functions in &lt;stdlib.h&gt; as specified by the ISO C standard - ISO/IEC 9899:1990. </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_STDLIB_INLINES</id>
   <description>This option chooses whether some of the particularly simple standard utility functions from &lt;stdlib.h&gt; are available as inline functions. This may improve performance, and as the functions are small, may even improve code size. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_RAND</id>
   <description>These options control the behaviour of the functions rand(), srand() and rand_r() </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_PER_THREAD_RAND</id>
   <description>This option controls whether the pseudo-random number generation functions rand() and srand() have their state recorded on a per-thread basis rather than global. If this option is disabled, some per-thread space can be saved. Note there is also a POSIX-standard rand_r() function to achieve a similar effect with user support. Enabling this option will use one slot of kernel per-thread data. You should ensure you have enough slots configured for all your per-thread data. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_RAND_SEED</id>
   <description>This selects the initial random number seed for rand()'s pseudo-random number generator. For strict ISO standard compliance, this should be 1, as per section 7.10.2.2 of the standard. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_RAND_TRACE_LEVEL</id>
   <description>Trace verbosity level for debugging the rand(), srand() and rand_r() functions. Increase this value to get additional trace output. </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_RAND_SIMPLEST</id>
   <description>This provides a very simple implementation of rand() that does not perform well with randomness in the lower significant bits. However it is exceptionally fast. It uses the sample algorithm from the ISO C standard itself. </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_RAND_SIMPLE1</id>
   <description>This provides a very simple implementation of rand() based on the simplest implementation above. However it does try to work around the lack of randomness in the lower significant bits, at the expense of a little speed. </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_RAND_KNUTH1</id>
   <description>This implements a slightly more complex algorithm published in Donald E. Knuth's Art of Computer Programming Vol.2 section 3.6 (p.185 in the 3rd ed.). This produces better random numbers than the simplest approach but is slower. </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_strtod</id>
   <description>This option allows use of the utility function strtod() (and consequently atof()) to convert from string to double precision floating point numbers. Disabling this option removes the dependency on the math library package. </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_STDLIB_CONV_LONGLONG</id>
   <description>Enabling this option will provide support for the strtoll(), strtoull() and atoll() conversion functions, which are the long long variants of the standard versions of these functions. Supporting this requires extra code and compile time. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_BSEARCH_TRACE_LEVEL</id>
   <description>Trace verbosity level for debugging the &lt;stdlib.h&gt; binary search function bsearch(). Increase this value to get additional trace output. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_QSORT_TRACE_LEVEL</id>
   <description>Trace verbosity level for debugging the &lt;stdlib.h&gt; quicksort function qsort(). Increase this value to get additional trace output. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDLIB_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDLIB_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building this package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDLIB_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building this package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STDLIB_TESTS</id>
   <description>This option specifies the set of tests for this package. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STRING</id>
   <description>This package provides string functions specified by the ISO C standard - ISO/IEC 9899:1990. </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_STRING_INLINES</id>
   <description>This option chooses whether some of the particularly simple string functions from &lt;string.h&gt; are available as inline functions. This may improve performance, and as the functions are small, may even improve code size. </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_STRING_PREFER_SMALL_TO_FAST</id>
   <description>This option tries to reduce string function code size at the expense of execution speed. The same effect can be produced if the code is compiled with the -Os option to the compiler. </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_STRING_BSD_FUNCS</id>
   <description>Enabling this option causes various compatibility functions commonly found in the BSD UNIX operating system to be included. These are functions such as bzero, bcmp, bcopy, bzero, strcasecmp, strncasecmp, index, rindex and swab. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STRING_STRTOK</id>
   <description>These options control the behaviour of the strtok() and strtok_r() string tokenization functions. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_STRING_PER_THREAD_STRTOK</id>
   <description>This option controls whether the string function strtok() has its state recorded on a per-thread basis rather than global. If this option is disabled, some per-thread space can be saved. Note there is also a POSIX-standard strtok_r() function to achieve a similar effect with user support. Enabling this option will use one slot of kernel per-thread data. You should ensure you have enough slots configured for all your per-thread data. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_STRING_STRTOK_TRACE_LEVEL</id>
   <description>Trace verbosity level for debugging the &lt;string.h&gt; functions strtok() and strtok_r(). Increase this value to get additional trace output. </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_STRING_STRDUP</id>
   <description>This option indicates whether strdup() is to be supported. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STRING_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STRING_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the C library. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STRING_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the C library. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_STRING_TESTS</id>
   <description>This option specifies the set of tests for the C library string functions. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_TIME</id>
   <description>This package provides time functions specified by the ISO C standard - ISO/IEC 9899:1990. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_TIME_CLOCK_WORKING</id>
   <description>This option controls whether clock() will actually try and determine the process time usage. With this option disabled, clock() does not disappear, but will permanently return (clock_t)-1 as mandated by the ISO C standard. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_TIME_TIME_WORKING</id>
   <description>This option controls whether time() will actually try and determine the current calendar time. With this option disabled, time() does not disappear, but will permanently return (time_t)-1 as mandated by the ISO C standard. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBC_TIME_SETTIME_WORKING</id>
   <description>This option controls whether cyg_libc_time_settime() will actually try and set the current calendar time. With this option disabled, cyg_libc_time_settime() does not disappear, but will permanently return an error. </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_TIME_POSIX</id>
   <description>Enabling this option allows the use of the following functions defined in POSIX 1003.1: asctime_r(), ctime_r(), gmtime_r(), strptime(), and localtime_r(). </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBC_TIME_SUS_EXTNS</id>
   <description>Enabling this option allows the use of certain additional conversion specifiers in the strftime function. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_TIME_ZONES</id>
   <description>These options control the default STandarD (STD) and Daylight Savings Time (DST) time offsets so that dates can be set correctly for the local environment. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_TIME_DST_DEFAULT_STATE</id>
   <description>This option controls whether the initial time environment is set up as STD, DST or unknown. Use the value 1 for DST, 0 for STD, and (-1) for unknown. This can also be set at runtime using the cyg_libc_time_setdst() function. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_TIME_STD_DEFAULT_OFFSET</id>
   <description>This option controls the offset from UTC in seconds when in local Standard Time. This value can be positive or negative. It can also be set at run time using the cyg_libc_time_setzoneoffsets() function. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_TIME_DST_DEFAULT_OFFSET</id>
   <description>This option controls the offset from UTC in seconds when in local Daylight Savings Time. This value can be positive or negative. It can also be set at run time using the cyg_libc_time_setzoneoffsets() function. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_TIME_INLINES</id>
   <description>These options control whether certain functions are available in inline form. This may lead to faster code at the expense of code space. But for some functions, or some functions with constant arguments, it may in fact lead to smaller code. </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_TIME_ASCTIME_INLINE</id>
   <description>Allow the asctime() function to be inlined </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_TIME_CTIME_INLINE</id>
   <description>Allow the ctime() function to be inlined </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_TIME_DIFFTIME_INLINE</id>
   <description>Allow the difftime() function to be inlined </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_TIME_GMTIME_INLINE</id>
   <description>Allow the gmtime() function to be inlined </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_TIME_LOCALTIME_INLINE</id>
   <description>Allow the localtime() function to be inlined </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_TIME_MKTIME_INLINE</id>
   <description>Allow the mktime() function to be inlined </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_TIME_ASCTIME_R_INLINE</id>
   <description>Allow the asctime_r() function to be inlined </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_TIME_CTIME_R_INLINE</id>
   <description>Allow the ctime_r() function to be inlined </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_TIME_GMTIME_R_INLINE</id>
   <description>Allow the gmtime_r() function to be inlined </description>
  </feature>
  <feature>
   <id>CYGIMP_LIBC_TIME_LOCALTIME_R_INLINE</id>
   <description>Allow the localtime_r() function to be inlined </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBC_TIME_CLOCK_TRACE_LEVEL</id>
   <description>Trace verbosity level for debugging the clock() function. Increase this value to get additional trace output when tracing is enabled. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_TIME_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_TIME_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the C library. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_TIME_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the C library. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBC_TIME_TESTS</id>
   <description>This option specifies the set of tests for the C library time and date functions. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBM</id>
   <description>ISO standard floating point mathematical library containing many useful functions for mathematical calculations. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBM_COMPATIBILITY</id>
   <description>These options deal with behaviour related to the various compatibility modes - POSIX, IEEE, X/OPEN and SVID. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBM_COMPAT_IEEE_ONLY</id>
   <description>The math library can be hard-coded to only behave in one compatibility mode - IEEE. This cannot be changed at run-time. IEEE mode is the most minimal of the compatibility modes, and so this will best help code size and speed, as well as omitting the code for other compatibility modes. If not defined, the math library can be set at run-time to any of the supported compatibility modes. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBM_COMPATIBILITY</id>
   <description>If you want to have support for more than one compatibility mode settable at run-time, rather than hard-coded IEEE mode, this component lets you choose which mode should be the default. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBM_COMPAT_DEFAULT</id>
   <description>This option automatically defines the default compatibility mode for numeric representation in terms of the values used to set that mode at run-time. </description>
  </feature>
  <feature>
   <id>CYGFUN_LIBM_SVID3_scalb</id>
   <description>SVID3 defined the scalb() function as double scalb(double, double) rather than double scalb(double, int) which is used by IBM, DEC, and probably others. Enabling this option chooses the (double, double) version. Note there is a function double scalbn(double, int) which is unaffected by this choice. </description>
  </feature>
  <feature>
   <id>CYGSYM_LIBM_NO_XOPEN_SVID_NAMESPACE_POLLUTION</id>
   <description>If you do not want to use either the X/Open or SVID3 compatibility modes, you may want to define this option to reduce the chance of namespace pollution. This is particularly likely to occur here as these standards define symbols with names that often appear in applications, such as exception, DOMAIN, OVERFLOW, etc. If your application also used these names, it may cause problems. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBM_USE_STDERR</id>
   <description>The SVID3 standard says that error messages should be output on the stderr console output stream. This option allows this ability to be explicitly controlled. However, this still only has an effect in SVID3 compatibility mode. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBM_THREAD_SAFETY</id>
   <description>This option controls whether the C library has support for thread safe operation in general. This requires eCos kernel support for per-thread data, and adjustment of the stack limit. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBM_THREAD_SAFE_COMPAT_MODE</id>
   <description>This option makes the setting of the compatiblity mode be a per-thread property. This directly implies that it also becomes thread-safe. </description>
  </feature>
  <feature>
   <id>CYGSEM_LIBM_THREAD_SAFE_GAMMA_FUNCTIONS</id>
   <description>This option makes the gamma() and lgamma() functions be thread-safe. Note that these functions are identical - they take the log of the absolute value of their argument. The sign of the argument is stored in a variable called signgam. Enabling this option makes signgam a per-thread variable. Note there are also gamma_r() and lgamma_r() alternatives that allow signgam to be passed in by reference as an argument. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBM_TRACE</id>
   <description>Tracing support is useful for debugging. Some Math library modules can be configured with different levels of tracing verbosity. These levels can be configured here. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBM_COMPATMODE_TRACE_LEVEL</id>
   <description>Trace level for debugging the getting and setting of the compatibility mode when it is configured to be thread-safe. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBM_SIGNGAM_TRACE_LEVEL</id>
   <description>Trace level for debugging all accesses to the signgam variable in thread-safe mode. </description>
  </feature>
  <feature>
   <id>CYGNUM_LIBM_X_TLOSS</id>
   <description>For the Bessel functions (j0(), j1(), jn(), y0(), y1(), yn()) this option defines the maximum absolute value of the ordinate before we assume total loss of significance. This number must be a floating-point number (e.g. contains a decimal point), and should be large. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBM_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBM_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the math library. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBM_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the math library. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_LIBM_TESTS</id>
   <description>This option specifies the set of tests for the math library. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX</id>
   <description>This package enables the POSIX compatibility layer that implements IEEE 1003.1. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_PTHREAD_MUTEX</id>
   <description>This component provides support for POSIX pthreads mutexes. </description>
  </feature>
  <feature>
   <id>_POSIX_THREAD_PRIO_INHERIT</id>
   <description>This option defines the POSIX feature test macro for supporting priority inheritance protocol in mutexes. </description>
  </feature>
  <feature>
   <id>_POSIX_THREAD_PRIO_PROTECT</id>
   <description>This option defines the POSIX feature test macro for supporting priority ceiling protocol in mutexes. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_SCHED</id>
   <description>This component provides controls over scheduling in POSIX. </description>
  </feature>
  <feature>
   <id>_POSIX_PRIORITY_SCHEDULING</id>
   <description>This option defines the POSIX feature test macro that indicates that priority scheduling is present. This should not be undefined. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_PTHREAD</id>
   <description>This component provides configuration controls for the POSIX pthreads package. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_PTHREAD_REQUIREMENTS</id>
   <description>This option exists merely to carry the pthread package requirements. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_PTHREAD_VALUES</id>
   <description>These are values that are either configurable, or derived from system parameters. </description>
  </feature>
  <feature>
   <id>CYGNUM_POSIX_PTHREAD_DESTRUCTOR_ITERATIONS</id>
   <description>Maximum number of iterations of key destructors allowed. </description>
  </feature>
  <feature>
   <id>CYGNUM_POSIX_PTHREAD_KEYS_MAX</id>
   <description>Number of per-thread data keys supported. </description>
  </feature>
  <feature>
   <id>CYGNUM_POSIX_PTHREAD_THREADS_MAX</id>
   <description>Maximum number of threads supported. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_PTHREAD_FEATURES</id>
   <description>These options define POSIX feature test macros that describe the eCos implementation of pthreads. These are not changeable configuration options. </description>
  </feature>
  <feature>
   <id>_POSIX_THREADS</id>
   <description>This option defines the POSIX feature test macro for thread support. </description>
  </feature>
  <feature>
   <id>_POSIX_THREAD_PRIORITY_SCHEDULING</id>
   <description>This option defines the POSIX feature test macro for thread priority scheduling support. </description>
  </feature>
  <feature>
   <id>_POSIX_THREAD_ATTR_STACKADDR</id>
   <description>This option defines the POSIX feature test macro for supporting the thread stack address in the thread attribute object. </description>
  </feature>
  <feature>
   <id>_POSIX_THREAD_ATTR_STACKSIZE</id>
   <description>This option defines the POSIX feature test macro for supporting the thread stack size in the thread attribute object. </description>
  </feature>
  <feature>
   <id>_POSIX_THREAD_PROCESS_SHARED</id>
   <description>This option defines the POSIX feature test macro for supporting process shared mutexes. Since eCos does not have processes, this attribute is undefined. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_MAIN_THREAD</id>
   <description>These options control the thread used to run the main() application entry routine. </description>
  </feature>
  <feature>
   <id>CYGNUM_POSIX_MAIN_DEFAULT_PRIORITY</id>
   <description>POSIX compatibility requires that the application's main() function be invoked in a thread. This option controls the priority of that thread. This priority is the POSIX priority and is NOT the same as an eCos thread priority. With POSIX thread priorities, lower numbers are lower priority, and higher numbers are higher priority. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_CLOCKS</id>
   <description>This component provides configuration controls for the POSIX clocks and the sleep(), nanosleep() and gettimeofday() functions. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_TIMERS</id>
   <description>This component provides configuration controls for the POSIX timers. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_SEMAPHORES</id>
   <description>This component provides configuration controls for POSIX semaphores. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_MQUEUES</id>
   <description>This component provides configuration controls for POSIX message queues. </description>
  </feature>
  <feature>
   <id>CYGIMP_POSIX_MQUEUE_VALIDATE_DESCRIPTOR</id>
   <description>This option turns on checking that message queue descriptors (of type mqd_t) passed into mq_* functions are valid. If so, the functions will fail with EBADF, as POSIX 1003.1 mandates. If this option is disabled, if an invalid descriptor is used, random corruption may occur, or the system may crash. If you are confident invalid descriptors will not be used, you may wish to be disable this to save some per-instance memory and execution time. </description>
  </feature>
  <feature>
   <id>CYGFUN_POSIX_MQUEUE_NOTIFY</id>
   <description>Enabling this option adds the function mq_notify() to the API. Without it, some code and per-message queue descriptor space is saved, as well as no longer requiring POSIX realtime signal support. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_SIGNALS</id>
   <description>This component provides configuration controls for the POSIX signals. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_UTSNAME</id>
   <description>This component provides configuration controls for the POSIX utsname structure and the uname() function. </description>
  </feature>
  <feature>
   <id>CYGPKG_POSIX_TESTS</id>
   <description>This option specifies the set of tests for the POSIX package. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON</id>
   <description>eCos supports a uITRON Compatibility Layer, providing full Level S (Standard) compliance with Version 3.02 of the uITRON Standard, plus many Level E (Extended) features. uITRON is the premier Japanese embedded RTOS standard. </description>
  </feature>
  <feature>
   <id>CYGIMP_UITRON_STRICT_CONFORMANCE</id>
   <description>Require the rest of the system configuration to match the needs of strict uITRON standards conformance. This option can only be set if the rest of the system is configured correctly for uITRON semantics, for example there must be a realtime clock, a suitable scheduler, and no timeslicing. Of course a system without this selected can be completely conformant; this is here to help you check. </description>
  </feature>
  <feature>
   <id>CYGIMP_UITRON_LOOSE_CONFORMANCE</id>
   <description>Do not require the rest of the system configuration to match the needs of strict uITRON standards conformance. For example a bitmap scheduler, or timeslicing, can be used with the uITRON functions, but such an environment is not strictly conformant with the uITRON specification. Of course a system with this selected can be completely conformant; but it is up to you to configure it correctly. </description>
  </feature>
  <feature>
   <id>CYGIMP_UITRON_INLINE_FUNCS</id>
   <description>If compiling your application with a C++ compiler, uITRON functions can be inline: set this to make it so. Inlining functions often increases execution speed, though possibly at the cost of a larger executable, depending on what functions are used. Do NOT set this if compiling your application in plain C. </description>
  </feature>
  <feature>
   <id>CYGIMP_UITRON_CPP_OUTLINE_FUNCS</id>
   <description>If compiling your application with a C++ compiler, uITRON functions can be given C++ style mangled names: set this to make it so. This option may make debugging your program easier, depending on your development environment. Do NOT set this if compiling your application in plain C. </description>
  </feature>
  <feature>
   <id>CYGSEM_UITRON_BAD_PARAMS_RETURN_ERRORS</id>
   <description>When an application is fully debugged there is no need to check for bad parameters on every system call, for those parameters which are typically pointers or constants. Removing the checking code saves space and improves performance: set this to make it so. When this option is set, the correctness of parameters is asserted using CYG_ASSERT() which compiles to nothing in a non-debug configuration. </description>
  </feature>
  <feature>
   <id>CYGSEM_UITRON_PARAMS_NULL_IS_GOOD_PTR</id>
   <description>uITRON deliberately defines the constant NADR (-1) for use as an invalid memory address. The value -1 is chosen to allow working in microcontrollers which have real memory at address zero, the traditional 'C' NULL pointer. By default, uITRON functions check for both NULL and NADR as bad addresses: set this option to prevent checking for NULL and allow pointers to address zero to be used. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_SEMAS</id>
   <description>uITRON Semaphore objects are used with functions named xxx_sem(); they support traditional semaphore semantics. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_SEMAS</id>
   <description>The number of uITRON semaphores present in the system. Valid semaphore object IDs will range from 1 to this value. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_SEMAS_CREATE_DELETE</id>
   <description>Support semaphore create and delete operations (cre_sem, del_sem). Otherwise all semaphores are created, up to the number specified above. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_SEMAS_INITIALLY</id>
   <description>The number of uITRON semaphores initially created. This number should not be more than the number of semaphores in the system, though setting it to a large value to mean 'all' is acceptable. Initially, only semaphores numbered 1 to this number exist; higher numbered ones must be created before use. It is only useful to initialize semaphores up to this number; higher numbered ones must be created in order to use them, and so they will be re-initialized. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_SEMAS_ARE_INITIALIZED</id>
   <description>Initialize semaphores to specific count values. Otherwise semaphores are initialized with the count set to zero. </description>
  </feature>
  <feature>
   <id>CYGDAT_UITRON_SEMA_INITIALIZERS</id>
   <description>A list of initializers separated by commas, one per line. An initializer is 'CYG_UIT_SEMA(INITIAL-COUNT)' or 'CYG_UIT_SEMA_NOEXS' for slots above the number initially to be created, when create and delete operations are supported. Note: this option is invoked in the context of a C++ array initializer, between curly brackets. Ensure that the number of initializers here exactly matches the total number of semaphores specified. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_MBOXES</id>
   <description>uITRON Mailbox objects are used with functions named xxx_msg() and xxx_mbx(); they support passing addresses (of 'messages') between tasks in a safe manner. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_MBOXES</id>
   <description>The number of uITRON mailboxes present in the system. Valid mailbox object IDs will range from 1 to this value. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_MBOXES_CREATE_DELETE</id>
   <description>Support mailbox create and delete operations (cre_mbx, del_mbx). Otherwise all mailboxes are created, up to the number specified above. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_MBOXES_INITIALLY</id>
   <description>The number of uITRON mailboxes initially created. This number should not be more than the number of mailboxes in the system, though setting it to a large value to mean 'all' is acceptable. Initially, only mailboxes numbered 1 to this number exist; higher numbered ones must be created before use. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_FLAGS</id>
   <description>uITRON Eventflag objects are used with functions named xxx_flg(); they support communication between tasks by means of setting and clearing bits in a word or flag value. Waiting for all or any of a set of bits is supported. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_FLAGS</id>
   <description>The number of uITRON eventflag objects present in the system. Valid eventflag object IDs will range from 1 to this value. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_FLAGS_CREATE_DELETE</id>
   <description>Support eventflag create and delete operations (cre_flg, del_flg). Otherwise all eventflags are created, up to the number specified above. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_FLAGS_INITIALLY</id>
   <description>The number of uITRON eventflags initially created. This number should not be more than the number of eventflags in the system, though setting it to a large value to mean 'all' is acceptable. Initially, only eventflags numbered 1 to this number exist; higher numbered ones must be created before use. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_TASKS</id>
   <description>uITRON Tasks are the basic blocks of multi-tasking in the uITRON world; they are threads or lightweight processes, sharing the address space and the CPU. They communicate using the primitives outlined above. Each has a stack, an entry point (a C or C++ function), and (where appropriate) a scheduling priority. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_TASKS</id>
   <description>The number of uITRON tasks present in the system. Valid task object IDs will range from 1 to this value. When changing this option it is also necessary to change CYGDAT_UITRON_TASK_INITIALIZERS and possibly CYGDAT_UITRON_TASK_EXTERNS, giving all tasks a stack. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_START_TASKS</id>
   <description>The number of uITRON tasks to start automatically. Tasks from 1 to this value will be started at the beginning of application execution. A value of zero here means to start them all. Tasks started in this way have a start code of zero, as if they were started by sta_tsk(i,0). If create and delete operations are supported, this number should be no greater than the number of tasks created initially. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_TASKS_CREATE_DELETE</id>
   <description>Support task create and delete operations (cre_tsk, del_tsk). Otherwise all tasks are created, up to the number specified above. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_TASKS_INITIALLY</id>
   <description>The number of uITRON tasks initially created. This number should not be more than the number of tasks in the system, though setting it to a large value to mean 'all' is acceptable. Initially, only tasks numbered 1 to this number exist; higher numbered ones must be created before use. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_STACK_SIZE</id>
   <description>Define a default stack size for uITRON tasks, for use in the initialization options below. This will be overridden where it is used if the architectural HAL requires a minimum stack size to handle interrupts correctly. </description>
  </feature>
  <feature>
   <id>CYGDAT_UITRON_TASK_EXTERNS</id>
   <description>Task initializers may refer to external objects such as memory for stack or functions to call. Use this option to define or declare any external objects needed by the task static initializer below. Example: create some memory for a stack using 'static char stack1[CYGNUM_UITRON_STACK_SIZE];' to set up a chunk of memory of the default stack size. Note: this option is invoked in the 'outermost' context of C++ source, where global/static objects are created; it should contain valid, self-contained, C++ source. </description>
  </feature>
  <feature>
   <id>CYGDAT_UITRON_TASK_INITIALIZERS</id>
   <description>Tasks must be statically initialized: enter a list of initializers separated by commas, one per line. An initializer is 'CYG_UIT_TASK(NAME,PRIO,FUNC,STACK,SIZE)' where name is a quoted string to name the task, prio is the initial priority of the task, func is the name of the entry point, stack is the address of the task's stack, and size is the size of the task's stack. When create and delete operations are supported, 'CYG_UIT_TASK_NOEXS(NAME,STACK,SIZE)' should be used for tasks which are not initially created, in order to tell the system what memory to use for stacks when these tasks are created later on. Using 'CYGNUM_UITRON_STACK_SIZE' for size is recommended, to use the option defined above, so long as that truly is the size of your stack(s). Note: this option is invoked in the context of a C++ array initializer, between curly brackets. Ensure that the number of initializers here exactly matches the number of tasks specified. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_MEMPOOLFIXED</id>
   <description>uITRON supports memory pools for dynamic, task-safe memory allocation. Two kinds are supported, fixed-size and variable-size. There may be multiple of each type of pool, each with differing characteristics. This option controls whether there are any fixed-size memorypools in the system. A fixed-size memorypool allocates blocks of memory of its preset fixed size and none other. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_MEMPOOLFIXED</id>
   <description>The number of uITRON Fixed-Size Memorypools present in the system. Valid Fixed-Size Memorypool IDs will range from 1 to this value. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_MEMPOOLFIXED_CREATE_DELETE</id>
   <description>Support fixed-size memory pool create and delete operations (cre_mpf, del_mpf). Otherwise all fixed mempools are created, up to the number specified above. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_MEMPOOLFIXED_INITIALLY</id>
   <description>The number of fixed mempools initially created. This number should not be more than the number of fixed mempools in the system, though setting it to a large value to mean 'all' is acceptable. Initially, only fixed mempools numbered from 1 to this number exist; higher numbered ones must be created before use. Whilst all mempools must be initialized to tell the system what memory to use for each pool, it is only useful to initialize the blocksize of fixed mempools up to this number; the blocksize for higher numbered ones will be defined when they are created. </description>
  </feature>
  <feature>
   <id>CYGDAT_UITRON_MEMPOOLFIXED_EXTERNS</id>
   <description>Fixed mempool initializers may refer to external objects such as memory for the pool to manage. Use this option to define or declare any external objects needed by the pool's static initializer below. Example: create some memory for a mempool using 'static char fpool1[2000];' to set up a chunk of memory of 2000 bytes. Note: this option is invoked in the 'outermost' context of C++ source, where global/static objects are created; it should contain valid, self-contained, C++ source. </description>
  </feature>
  <feature>
   <id>CYGDAT_UITRON_MEMPOOLFIXED_INITIALIZERS</id>
   <description>Fixed block memory pools should be statically initialized: enter a list of initializers separated by commas, one per line. An initializer is 'CYG_UIT_MEMPOOLFIXED(ADDR,SIZE,BLOCK)' where addr is the address of memory to manage, size is the total size of that memory, and block is the block size for allocation by the pool. If create and delete operations are supported, initializers of the form 'CYG_UIT_MEMPOOLFIXED_NOEXS(ADDR,SIZE)' should be used for pools which are not initially created, to tell the system what memory to use for each pool. Note: this option is invoked in the context of a C++ array initializer, between curly brackets. Ensure that the number of initializers here exactly matches the total number of fixed pools specified. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_MEMPOOLVAR</id>
   <description>uITRON supports memory pools for dynamic, task-safe memory allocation. Two kinds are supported, fixed-size and variable-size. There may be multiple of each type of pool, each with differing characteristics. This option controls whether there are any variable-size memorypools in the system. A variable-size memorypool allocates blocks of memory of any size requested, resources permitting. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_MEMPOOLVAR</id>
   <description>The number of uITRON Variable-Size Memorypools present in the system. Valid Variable-Size Memorypool IDs will range from 1 to this value. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_MEMPOOLVAR_CREATE_DELETE</id>
   <description>Support variable-size memory pool create and delete operations (cre_mpl, del_mpl). Otherwise all variable-size mempools are created, up to the number specified above. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_MEMPOOLVAR_INITIALLY</id>
   <description>The number of variable-size mempools initially created. This number should not be more than the number of variable mempools in the system, though setting it to a large value to mean 'all' is acceptable. Initially, only variable mempools numbered from 1 to this number exist; higher numbered ones must be created before use. All mempools must be initialized to tell the system what memory to use for each pool. </description>
  </feature>
  <feature>
   <id>CYGDAT_UITRON_MEMPOOLVAR_EXTERNS</id>
   <description>Variable mempool initializers may refer to external objects such as memory for the pool to manage. Use this option to define or declare any external objects needed by the pool's static initializer below. Example: create some memory for a mempool using 'static char vpool1[2000];' to set up a chunk of memory of 2000 bytes. Note: this option is invoked in the 'outermost' context of C++ source, where global/static objects are created; it should contain valid, self-contained, C++ source. </description>
  </feature>
  <feature>
   <id>CYGDAT_UITRON_MEMPOOLVAR_INITIALIZERS</id>
   <description>Variable block memory pools should be statically initialized: enter a list of initializers separated by commas, one per line. An initializer is 'CYG_UIT_MEMPOOLVAR(ADDR,SIZE)' where addr is the address of memory to manage, and size is the total size of that memory. If create and delete operations are supported, initializers of the form 'CYG_UIT_MEMPOOLVAR_NOEXS(ADDR,SIZE)' should be used for pools which are not initially created, to tell the system what memory to use for each pool. Note: this option is invoked in the context of a C++ array initializer, between curly brackets. Ensure that the number of initializers here exactly matches the total number of variable pools specified. </description>
  </feature>
  <feature>
   <id>CYGSEM_UITRON_TIME_IS_MILLISECONDS</id>
   <description>Setting this option enables a conversion feature so that time parameters to uITRON APIs are converted from milliSeconds to whatever the eCos kernel real-time clock's units are, or vice versa. If this option is not set, time parameters are expressed in kernel clock ticks. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_ALARMS</id>
   <description>uITRON Alarm Handlers are used with functions named def_alm() and ref_alm(); they support simple timing, with a function callback at the end of the timed period. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_ALARMS</id>
   <description>The number of uITRON alarm handlers present in the system. Valid alarm handler numbers will range from 1 to this value. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_CYCLICS</id>
   <description>uITRON Cyclic Handlers are used with functions named xxx_cyc(); they support timing with a periodic function callback that can be dynamically turned on or off, and resynchronized with external events. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_CYCLICS</id>
   <description>The number of uITRON cyclics handlers present in the system. Valid cyclic handler numbers will range from 1 to this value. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_INTERRUPT_FUNCTIONS</id>
   <description>The uITRON system provides some functions which may safely be used within interrupt handlers. In eCos, this means within ISRs, providing that the corresponding DSR is associated with that interrupt. These functions are typically named ixxx_yyy(), according to the uITRON specification, for example isig_sem() corresponds to normal function sig_sem(). </description>
  </feature>
  <feature>
   <id>CYGSEM_UITRON_ISRFUNCS_TRY_IMMEDIATE_EXECUTION</id>
   <description>These functions of necessity maintain a queue of operations requested for deferred execution. However, during an interrupt, it may be safe to perform scheduling operations. If this option is set, the interrupt-safe functions will have effect there and then if it is indeed safe, rather than queueing a request to perform the operation in the DSR. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_ISR_ACTION_QUEUESIZE</id>
   <description>These functions of necessity maintain a queue of operations requested for deferred execution. This option controls the queue size. It must be a power of two for implementation reasons. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_VERSION</id>
   <description>The get_ver() uITRON system call returns several version related values describing the vendor, product and CPU in question as well as the version of the uITRON standard supported. These values may be specified here. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_VER_MAKER</id>
   <description>This value is returned in the 'maker' field of the T_VER structure in response to a get_ver() system call. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_VER_ID</id>
   <description>This value is returned in the 'id' field of the T_VER structure in response to a get_ver() system call. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_VER_SPVER</id>
   <description>This value is returned in the 'spver' field of the T_VER structure in response to a get_ver() system call. Do NOT change this value. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_VER_PRVER</id>
   <description>This value is returned in the 'prver' field of the T_VER structure in response to a get_ver() system call. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_VERSION_PRNO</id>
   <description>The get_ver() uITRON system call returns several version related values describing the vendor, product and CPU in question as well as the version of the uITRON standard supported. These values may be specified here. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_VER_PRNO_0</id>
   <description>This value is returned in the 'prno[0]' field of the T_VER structure in response to a get_ver() system call. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_VER_PRNO_1</id>
   <description>This value is returned in the 'prno[1]' field of the T_VER structure in response to a get_ver() system call. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_VER_PRNO_2</id>
   <description>This value is returned in the 'prno[2]' field of the T_VER structure in response to a get_ver() system call. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_VER_PRNO_3</id>
   <description>This value is returned in the 'prno[3]' field of the T_VER structure in response to a get_ver() system call. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_VER_CPU</id>
   <description>This value is returned in the 'cpu' field of the T_VER structure in response to a get_ver() system call. </description>
  </feature>
  <feature>
   <id>CYGNUM_UITRON_VER_VAR</id>
   <description>This value is returned in the 'var' field of the T_VER structure in response to a get_ver() system call. Do NOT change this value. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the uITRON compatibility layer. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the uITRON compatibility layer. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_UITRON_TESTS</id>
   <description>This option specifies the set of tests for the uITRON compatibility layer. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WATCHDOG</id>
   <description>The watchdog IO device allows applications to make use of a timer facility. Depending on the underlying hardware device driver, a watchdog timeout will either cause a board reset or an action routine to be called. The application must call the watchdog reset function at regular intervals, or else the device will timeout. The assumption is that the watchdog timer should never trigger unless there has been a serious fault in either the hardware or the software. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WATCHDOG_IMPLEMENTATION</id>
   <description>Implementations of the watchdog device. </description>
  </feature>
  <feature>
   <id>CYGPKG_WATCHDOG_EMULATE</id>
   <description>When this option is enabled, a watchdog device will be emulated using the kernel real-time clock. </description>
  </feature>
  <feature>
   <id>CYGIMP_WATCHDOG_NONE</id>
   <description>Disables the watchdog. </description>
  </feature>
  <feature>
   <id>CYGSEM_WATCHDOG_RESETS_ON_TIMEOUT</id>
   <description>Some watchdog devices reset the board on timeout - for these implementations it does not make sense to register timeout actions so the code gets disabled when this option is set. When this option is not set, it is the application's responsibility to register an action handler which can force a board reset when it gets called. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WATCHDOG_BUILD_INTERACTIVE_TEST</id>
   <description>This option enables the building of a watchdog test which can be used to test that the board resets on watchdog timeout. This test is built separately since it only makes sense to use interactively. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WATCHDOG_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WATCHDOG_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the watchdog IO device. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WATCHDOG_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the watchdog IO device. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WATCHDOG_TESTS</id>
   <description>This option specifies the set of tests for the watchdog IO device. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WALLCLOCK</id>
   <description>The wallclock device provides real time stamps, as opposed to the eCos kernel timers which typically just count the number of clock ticks since the hardware was powered up. Depending on the target platform this device may involve interacting with a suitable clock chip, or it may be emulated by using the kernel timers. </description>
  </feature>
  <feature>
   <id>CYGSEM_WALLCLOCK_MODE</id>
   <description>The wallclock driver can be used in one of two modes. Set/get mode allows time to be kept during power off (assuming there's a battery backed clock). Init/get mode is slightly smaller and can be used when there is no battery backed clock - in this mode time 0 is the time of the board power up. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WALLCLOCK_IMPLEMENTATION</id>
   <description>Implementations of the wallclock device. </description>
  </feature>
  <feature>
   <id>CYGPKG_WALLCLOCK_EMULATE</id>
   <description>When this option is enabled, a wallclock device will be emulated using the kernel real-time clock. </description>
  </feature>
  <feature>
   <id>CYGIMP_WALLCLOCK_NONE</id>
   <description>Disables the wallclock. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WALLCLOCK_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WALLCLOCK_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the wallclock device. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WALLCLOCK_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the wallclock device. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_WALLCLOCK_TESTS</id>
   <description>This option specifies the set of tests for the wallclock device. </description>
  </feature>
  <feature>
   <id>CYGPKG_ERROR</id>
   <description>This package contains the common list of error and status codes. It is held centrally to allow packages to interchange error codes and status codes in a common way, rather than each package having its own conventions for error/status reporting. The error codes are modelled on the POSIX style naming e.g. EINVAL etc. This package also provides the standard strerror() function to convert error codes to textual representation, as well as an implementation of the errno idiom. </description>
  </feature>
  <feature>
   <id>CYGPKG_ERROR_ERRNO</id>
   <description>This package controls the behaviour of the errno variable (or more strictly, expression) from &lt;errno.h&gt;. </description>
  </feature>
  <feature>
   <id>CYGSEM_ERROR_PER_THREAD_ERRNO</id>
   <description>This option controls whether the standard error code reporting variable errno is a per-thread variable, rather than global. </description>
  </feature>
  <feature>
   <id>CYGNUM_ERROR_ERRNO_TRACE_LEVEL</id>
   <description>Trace verbosity level for debugging the errno retrieval mechanism in errno.cxx. Increase this value to get additional trace output. </description>
  </feature>
  <feature>
   <id>CYGPKG_ERROR_STRERROR</id>
   <description>This package controls the presence and behaviour of the strerror() function from &lt;string.h&gt; </description>
  </feature>
  <feature>
   <id>CYGPKG_ERROR_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_ERROR_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the error package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_ERROR_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the error package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FILEIO</id>
   <description>This package enables the POSIX compatibility layer that implements IEEE 1003.1 file IO. </description>
  </feature>
  <feature>
   <id>CYGINT_IO_FILEIO_FS</id>
   <description>Each filesystem driver which FILEIO can use implements this interface. You can use this to determine if there are any filesystems configured in the system. </description>
  </feature>
  <feature>
   <id>CYGFUN_IO_FILEIO_SELECT</id>
   <description>This option enables support for select(). </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FILEIO_DEVFS_SUPPORT</id>
   <description>This option enables support for the devfs file system. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FILEIO_SOCKET_SUPPORT</id>
   <description>This option enables support for the socket interface. It is only present if the NET package is included. </description>
  </feature>
  <feature>
   <id>CYGNUM_FILEIO_NFILE</id>
   <description>This option controls the number of open files that are allowed for all filesystems. </description>
  </feature>
  <feature>
   <id>CYGNUM_FILEIO_NFD</id>
   <description>This option controls the number of open file descriptors that are allowed for all filesystems. </description>
  </feature>
  <feature>
   <id>CYGNUM_FILEIO_FSTAB_MAX</id>
   <description>This option controls the maximum number of filesystems that can be handled by the fileio system. </description>
  </feature>
  <feature>
   <id>CYGNUM_FILEIO_MTAB_MAX</id>
   <description>This option controls the maximum number of mounted filesystems that can be handled by the fileio system. </description>
  </feature>
  <feature>
   <id>CYGNUM_FILEIO_MTAB_EXTRA</id>
   <description>This option controls the number of mounted filesystems that can be created dynamically. </description>
  </feature>
  <feature>
   <id>CYGNUM_FILEIO_NSTAB_MAX</id>
   <description>This option controls the maximum number of installed network stacks that can be handled by the fileio system. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FILEIO_TRACK_CWD</id>
   <description>This option enables tracking of the name of the current directory in the FILEIO package, to support the getcwd() function. When this option is enabled the FILEIO package will attempt to maintain a string that names the current directory. It does this textually, dealing with "." and ".." entries by textual manipulation. While this should always provide a path for the current directory, it may not be the best, if symbolic links are present. This tracked CWD is only used if a filesystem does not support the FS_INFO_GETCWD key. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FILEIO_INODE</id>
   <description>This option enables generic inode support useful to some filesystems. Not all filesystems require this so it is not enabled by default. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FILEIO_MAX_INODE_CACHE_DEAD</id>
   <description>The inode cache allows a maximum limit to be set for the number of unused inodes still in the cache before they are freed. It may be set to 0 to indicate no dead inode caching should be provided. </description>
  </feature>
  <feature>
   <id>CYGNUM_FILEIO_IOVEC_MAX</id>
   <description>This option controls the maximum size of the iovec structure that can be used by readv()/writev(). This limit is required because the iovec structure must be invariant (to the user), thus a copy needs to be made by the interface routines. The limit is merely a control over the amount of stack space used by the readv()/writev() functions. </description>
  </feature>
  <feature>
   <id>CYGSEM_FILEIO_INFO_DISK_USAGE</id>
   <description>Enabling this option includes code in some filesystems to implement a call using cyg_fs_getinfo to return the current filesystem block usage. </description>
  </feature>
  <feature>
   <id>CYGPKG_FILEIO_FNMATCH</id>
   <description>This component provides configuration controls for the POSIX fnmatch() function. </description>
  </feature>
  <feature>
   <id>CYGPKG_FILEIO_DIRENT_DTYPE</id>
   <description>If this option is enabled then struct dirent contains a d_type field. With this field, file type may be distinguished directly without calling stat. Note: This member is not part of the POSIX standard, however is commonely implemented in Linux, FreeBSD, but not SunOS. Also, not all filesystems support it. So this feature is not portable and should be used with caution. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FILEIO_TESTS</id>
   <description>This option specifies the set of tests for the FileIO package. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET</id>
   <description>Basic networking support, including TCP/IP. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_DRIVER_FRAMEWORK</id>
   <description>In order to decouple the network stack from driver specifics, the driver framework must be defined in a separate package. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_STACK</id>
   <description>In order to decouple the network support from most stack specifics, the actual stack implementation must be defined in a separate package. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_INET</id>
   <description>This option enables support for INET (IP) network processing. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_INET6</id>
   <description>This option enables support for IPv6 networks. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_IPSEC</id>
   <description>This option enables support for IPSEC </description>
  </feature>
  <feature>
   <id>CYGSEM_NET_ROUTING</id>
   <description>This option enables support for packet routing. </description>
  </feature>
  <feature>
   <id>CYGSEM_NET_RANDOMID</id>
   <description>This option enables the use of random IP packet sequence identifiers, rather than a purely sequential sequence. It is believed that use of random identifiers improves security, at a fairly substantial computational overhead. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_TFTP</id>
   <description>This option provides additional library support for the TFTP (Trivial File Transfer Protocol). </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_TFTPD_THREAD_PRIORITY</id>
   <description>This option allows the thread priority level used by the TFTP server thread to be adjusted by the user. It should be set high enough that sufficient CPU resources are available to process network data, but may be adjusted so that application threads can have precedence over TFTP server processing. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_TFTPD_CLIENT_BIG_PACKET</id>
   <description>Implements RFC 2348, an optional extension to the TFTP protocol to allow the client and server to negotiate to use bigger packets. This can make upload/download faster </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_TFTPD_CLIENT_BIG_PACKET_SIZE</id>
   <description>Size of the packets to negotiate. In an error free environment, bigger packets will result in faster transfers. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_TFTPD_THREAD_STACK_SIZE</id>
   <description>This option controls the size of the stack used for the TFTP server. The default should be sufficient for most cases but some applications my require bigger stacks when the implementation of file operations are complex. </description>
  </feature>
  <feature>
   <id>CYGSEM_NET_TFTPD_MULTITHREADED</id>
   <description>This option controls the tftp server ability to be multi-threaded. When enabled, multiple server can be started on the same port number. This allows multiple concurrent transfers to be active. When this option is not enabled, while one transfer is active, other requests will be delayed or even ignored. </description>
  </feature>
  <feature>
   <id>CYGNUM_NET_TFTPD_MULTITHREADED_PORTS</id>
   <description>Each set of servers running on the same port number require a semaphore to synchronise there operation. This option controls the number of semaphores and so the number of port numbers multithreaded servers which can be running on. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_TFTP_FILE_ACCESS</id>
   <description>Minimal in-memory file I/O support for TFTP server. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_DHCP</id>
   <description>Provide DHCP for initializing the IP address of network interfaces. The DHCP client is capable of falling back to BOOTP usage if the server does not support DHCP, so it should never be necessary to disable this option. However, depending on other configuration the DHCP client may provide or require a kernel thread of its own; this consumes quite a lot of resource which a BOOTP solution does not require. </description>
  </feature>
  <feature>
   <id>CYGOPT_NET_DHCP_DHCP_THREAD</id>
   <description>Provide a separate thread to renew DHCP leases; otherwise the application MUST periodically examine the semaphore dhcp_needs_attention and call dhcp_bind() if it is signalled. If enabled, this thread does all that for you. Independent of this option, initialization of the interfaces still occurs in init_all_network_interfaces() and your startup code must call that. It will start the DHCP management thread if necessary. If a lease fails to be renewed, the management thread will shut down all interfaces and attempt to initialize all the interfaces again from scratch. This may cause application problems, in which case managing the DHCP state in an application aware thread is recommended. See comments in dhcp.h </description>
  </feature>
  <feature>
   <id>CYGOPT_NET_DHCP_DHCP_THREAD_PARAM</id>
   <description>If the parameter is nonzero, it loops forever; if zero, the thread exits if a lease expires, and the application must detect this and tidy up or reboot the whole machine. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_DHCP_THREAD_PRIORITY</id>
   <description>This option sets the thread priority level used by the DHCP management thread. It should be high enough that it can run when necessary, but it does not need to be as high as the network thread itself. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_DHCP_THREAD_STACK_SIZE</id>
   <description>This option controls the size of the stack used for the DHCP mamagement thread. The default should be sufficient for most cases but some applications my require bigger stacks when using for example diag_printf. </description>
  </feature>
  <feature>
   <id>CYGOPT_NET_DHCP_PARM_REQ_LIST_REPLACE</id>
   <description>This option replaces the default list of requested options in the DHCP/BOOTP request list. These are a comma separated list of TAG_xxx values. </description>
  </feature>
  <feature>
   <id>CYGOPT_NET_DHCP_PARM_REQ_LIST_ADDITIONAL</id>
   <description>This option adds additional options to the list of requested options in the DHCP/BOOTP request list. These are a comma separated list of TAG_xxx values. </description>
  </feature>
  <feature>
   <id>CYGOPT_NET_DHCP_OPTION_HOST_NAME</id>
   <description>This option adds the TAG_HOST_NAME option to the DHCP/BOOTP requests. The host name is defined by calling the function dhcp_set_hostname(), prior to calling init_all_network_interfaces(). </description>
  </feature>
  <feature>
   <id>CYGNUM_NET_DHCP_OPTION_HOST_NAME_LEN</id>
   <description>This option defines the maximum length allowed for the host name set by dhcp_set_hostname(). </description>
  </feature>
  <feature>
   <id>CYGOPT_NET_DHCP_OPTION_DHCP_CLIENTID_MAC</id>
   <description>This option adds the TAG_DHCP_CLIENTID option to the DHCP/BOOTP requests. It uses the interface MAC address for the identifier. </description>
  </feature>
  <feature>
   <id>CYGNUM_NET_DHCP_MIN_RETRY_TIME</id>
   <description>This option allows the application to specify the minimum number of seconds for DHCP discovery. If DHCP discovery fails, the action to be taken is application specific. Multiple discovery attempts are made during the time specified with each subsequent attempt having a longer timeout. Attempts begin at approximately 1, 5, 15, 35, and 65 seconds with the last attempt timing out after the total of 125 seconds. A new attempt will not begin if the minimum time has been reached. Although, an attempt in progress will run past the minimum time specified. For example: Specifying 30 seconds would timeout at 35 seconds. Specifying 70 seconds has the same effect as specifying 100 seconds where it would run for the total of 125 seconds. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_IPV6_ROUTING</id>
   <description>Various options which control how routing is done for the IPv6 enabled interfaces. </description>
  </feature>
  <feature>
   <id>CYGOPT_NET_IPV6_ROUTING_THREAD</id>
   <description>Provide a separate thread to send router solicitation messages. </description>
  </feature>
  <feature>
   <id>CYGINT_NET_IPV6_ROUTING_THREAD_PRIORITY</id>
   <description>This option sets the thread priority level used by the IPv6 routing thread. It should be high enough that it can run when necessary, but it does not need to be as high as the network thread itself. </description>
  </feature>
  <feature>
   <id>CYGINT_NET_IPV6_ROUTING_THREAD_PERIOD</id>
   <description>This option sets the rate at which router solicitations will be sent out by the routing thread (in seconds). </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_DEBUG</id>
   <description>This component controls whether there is diagnostic output for stack operations. Options within this component allow even more verbose output for certain areas. </description>
  </feature>
  <feature>
   <id>CYGDBG_NET_TIMING_STATS</id>
   <description>This component controls whether there is diagnostic information about how long memcpy, malloc, mbuf_alloc etc take to perform. </description>
  </feature>
  <feature>
   <id>CYGDBG_NET_SHOW_MBUFS</id>
   <description>This option controls whether diagnostic information about the state of all mbufs is collected. This information will be displayed whenever the network stack runs out of mbufs. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the networking package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the networking package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_BUILD_TESTS</id>
   <description>This component contains options related to testing the network stack. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_BUILD_HW_TESTS</id>
   <description>This option enables the building of additional network tests that use real ethernet devices. At this time these are just demos. With this option disabled, only loopback interface tests will be built. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_TESTS</id>
   <description>This option specifies the set of tests for the networking package. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_TESTS_USE_RT_TEST_HARNESS</id>
   <description>Platform and/or ethernet device driver packages may provide a test harness to verify that interrupts are not disabled or flooded for too long during a test. If such is provided, CYGTST_DEVS_ETH_TEST_NET_REALTIME is defined and can be #include'd to acquire the support. Some tests in the TCP/IP stack can use this harness; this option controls whether they do. The StrongARM EBSA285 Ethernet device driver is one package that provides such a harness. See the file tests/test_net_realtime.h in there for details. </description>
  </feature>
  <feature>
   <id>CYGHWR_NET_DRIVER_ETH0_MANUAL</id>
   <description>If this option is selected, the eCos library provides no initialization code for this interface; you must perform all the initialization in the application, by means of appropriate ioctl() calls, or by calling init_net() with an appropriate bootp record you have constructed yourself. </description>
  </feature>
  <feature>
   <id>CYGHWR_NET_DRIVER_ETH0_BOOTP</id>
   <description>If this option is selected, init_all_network_interfaces() will use DHCP or BOOTP to acquire initialization data for this interface, and then set it up accordingly. </description>
  </feature>
  <feature>
   <id>CYGHWR_NET_DRIVER_ETH0_IPV6_PREFIX</id>
   <description>This option allows a specific, static address prefix to be set for an interface running IPv6. When used, the lower 64 bits of the address will be set to the IPv4 IP address. Note: this should not be confused with the standard IPv4-&gt;IPv6 mapped addresses, but rather just a simple way to assign addresses to nodes within an IPv6 network. </description>
  </feature>
  <feature>
   <id>CYGHWR_NET_DRIVER_ETH0_ADDRS</id>
   <description>These options let you configure all the initialization data that init_all_network_interfaces() will use for 'eth0' statically. Be careful when doing this, because if you run the same application image on multiple boards, they will have identical IP addresses and so on; this is a Bad Thing. The values you set are inserted in a bootp-style record that is fed into a common setup routine to configure the interface. That routine does not in fact use the 'Server IP address' field. The bootp record is also available to application code, and some eCos networking test programs use the 'Server IP address' field to mean 'a machine we can interact with' for example to ping or perform ftp with. That is the rationale for its inclusion here. The gateway address is used to set up a default route if nonzero. If you have more than one interface, setting up more than one default route is will cause malfunctions. A gateway address of 0.0.0.0 can be set to prevent that route setup. Of course, your application can add real routes once the interface(s) initialization is complete. </description>
  </feature>
  <feature>
   <id>CYGHWR_NET_DRIVER_ETH1_MANUAL</id>
   <description>If this option is selected, the eCos library provides no initialization code for this interface; you must perform all the initialization in the application, by means of appropriate ioctl() calls, or by calling init_net() with an appropriate bootp record you have constructed yourself. </description>
  </feature>
  <feature>
   <id>CYGHWR_NET_DRIVER_ETH1_BOOTP</id>
   <description>If this option is selected, init_all_network_interfaces() will use DHCP or BOOTP to acquire initialization data for this interface, and then set it up accordingly. </description>
  </feature>
  <feature>
   <id>CYGHWR_NET_DRIVER_ETH1_IPV6_PREFIX</id>
   <description>This option allows a specific, static address prefix to be set for an interface running IPv6. When used, the lower 64 bits of the address will be set to the IPv4 IP address. Note: this should not be confused with the standard IPv4-&gt;IPv6 mapped addresses, but rather just a simple way to assign addresses to nodes within an IPv6 network. </description>
  </feature>
  <feature>
   <id>CYGHWR_NET_DRIVER_ETH1_ADDRS</id>
   <description>These options let you configure all the initialization data that init_all_network_interfaces() will use for 'eth1' statically. Be careful when doing this, because if you run the same application image on multiple boards, they will have identical IP addresses and so on; this is a Bad Thing. The values you set are inserted in a bootp-style record that is fed into a common setup routine to configure the interface. That routine does not in fact use the 'Server IP address' field. The bootp record is also available to application code, and some eCos networking test programs use the 'Server IP address' field to mean 'a machine we can interact with' for example to ping or perform ftp with. That is the rationale for its inclusion here. The gateway address is used to set up a default route if nonzero. If you have more than one interface, setting up more than one default route is will cause malfunctions. A gateway address of 0.0.0.0 can be set to prevent that route setup. Of course, your application can add real routes once the interface(s) initialization is complete. This interface 'eth1' has no route set up in the default configuration. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FREEBSD_STACK</id>
   <description>Basic networking support, including TCP/IP. </description>
  </feature>
  <feature>
   <id>CYGINT_NET_IPSEC_BSD_CRYPTO</id>
   <description>In order to avoid potential export problems of crypto functions, they are distributed in a separate package which must implement this interface </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FREEBSD_INET</id>
   <description>This option enables support for INET (IPv4) network processing. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FREEBSD_INET6</id>
   <description>This option enables support for new IPv6. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FREEBSD_IPSEC</id>
   <description>This option enables support for IPSEC. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FREEBSD_IPSEC6</id>
   <description>This option enables support for IPSEC with IPv6 </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FREEBSD_SYSCTL</id>
   <description>This option enables support for the system call sysctl used to configure options/variables in the stack and retrieve statistics. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_RANDOM_PORTS</id>
   <description>This option enables support for random source ports when the source port is not specified. This option is useful when connecting through firewalls. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_NGIF</id>
   <description>This option controls the number of active GIF things. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_NLOOP</id>
   <description>This option controls the number of loopback, i.e. local, interfaces. There is seldom need for this value to be anything other than one. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FREEBSD_LOGGING</id>
   <description>This option controls the type and amount of information printed by the networking code. Different logging facilities may be enabled by bitwise or-ing: LOG_ERR 0x0001 - error conditions LOG_WARNING 0x0002 - interesting, but not errors LOG_NOTICE 0x0004 - things to look out for LOG_INFO 0x0008 - generic comments LOG_DEBUG 0x0010 - for finding obscure problems LOG_MDEBUG 0x0020 - additional information about memory allocations LOG_IOCTL 0x0040 - information about ioctl calls LOG_INIT 0x0080 - information as system initializes LOG_ADDR 0x0100 - information about IPv6 addresses LOG_FAIL 0x0200 - why packets (IPv6) are ignored, etc. LOG_EMERG 0x4000 - emergency conditions LOG_CRIT 0x8000 - critical error </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FORCE_SERIAL_CONSOLE</id>
   <description>Trying to print initialization messages can fail if the console channel is a network connection (via RedBoot). Use of this option forces the stack to use a serial port during this phase for safety. It can be used if the network drivers are unstable at this point. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_MEM_USAGE</id>
   <description>This option controls the amount of memory pre-allocated for buffers used by the networking code. The number is an upper limit, with at least enough space to get the stack initialized. Tip: setting a breakpoint at cyg_memalloc_alloc_fail() is an especially useful tool in establishing when there is too little memory for an application. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_MEMPOOL_SIZE</id>
   <description>Controls the amount of memory in the pool used for dynamically allocated memory. This does not include mbufs or clusters. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_MBUFS_SIZE</id>
   <description>Size of MBUFs pool. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_CLUSTERS_SIZE</id>
   <description>Clusters size. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_MAXSOCKETS</id>
   <description>This option controls the amount of memory pre-allocated for socket buffers used by the networking code. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_NUM_WAKEUP_EVENTS</id>
   <description>This option controls the number of pending network events used by the networking code. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_THREAD_PRIORITY</id>
   <description>This option allows the thread priority level used by the networking stack to be adjusted by the user. It should be set high enough that sufficient CPU resources are available to process network data, but may be adjusted so that application threads can have precedence over network processing. </description>
  </feature>
  <feature>
   <id>CYGNUM_NET_THREAD_STACKSIZE</id>
   <description>This option allows the thread stack allocated for the networking stack to be adjusted by the user. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FAST_THREAD_PRIORITY</id>
   <description>This option sets the thread priority level used by the fast network thread. The fast network thread runs often but briefly, to service network device interrupts and network timeout events. This thread should have higher priority than the background network thread. It is reasonable to set this thread's priority higher than application threads for best network throughput, or to set it lower than application threads for best latency for those application threads themselves, potentially at a cost to network throughput. </description>
  </feature>
  <feature>
   <id>CYGNUM_NET_FAST_THREAD_STACKSIZE</id>
   <description>This option allows the thread stack allocated for the fast networking stack to be adjusted by the user. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FAST_THREAD_TICKLE_DEVS</id>
   <description>If this is enabled, the fast network thread will tickle the device(s) periodically, to unblock them when the hardware has become wedged due to a lost interrupt or other hardware race-condition type problem. This is not necessary if a networked app is running which sends packets itself often - or uses TCP, or any similar protocol which exchanges keep-alive packets periodically and often enough. Trying to send a packet passes control into the driver; this is sufficient to detect and unblock jammed hardware. </description>
  </feature>
  <feature>
   <id>CYGNUM_NET_FAST_THREAD_TICKLE_DEVS_DELAY</id>
   <description>The default is 50, which will usually mean a delay between tests for 'stuck' devices of 500mS, that is half a second. The overhead only applies if no network activity occurred, so it may be acceptable to make this value very small, where high CPU load does not matter during network idle periods, or very large if your application tries often to send packets itself. </description>
  </feature>
  <feature>
   <id>CYGOPT_NET_FREEBSD_STACK_ACCEPT_UNICAST</id>
   <description>This option enables passing of unicast IP packets to the application, when the interface IP address is configured as INADDR_ANY (0.0.0.0). This option is useful for some applications that need to receive unicast IP packets when the interface address is unknown. Such an application is bootp. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FREEBSD_STACK_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the networking package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FREEBSD_STACK_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the networking package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FREEBSD_STACK_TESTS</id>
   <description>These are test specifically for the FreeBSD stack. These test features which only the FreeBSD stack has </description>
  </feature>
  <feature>
   <id>CYGPKG_SNMPAGENT</id>
   <description>SNMP agent based on the UCD-SNMP project. </description>
  </feature>
  <feature>
   <id>CYGPKG_SNMPAGENT_SYSTEM_MIB</id>
   <description>These options control the default values for items in the system MIB. The symbols are used as initializers for C char arrays; therefore you must include "double-quotes" in the defined value to get the correct results. </description>
  </feature>
  <feature>
   <id>CYGDAT_NET_SNMPAGENT_SYS_CONTACT</id>
   <description>This specifies the value returned for the sysContact field of the System MIB (via the symbol SYS_CONTACT in the UCD sources). </description>
  </feature>
  <feature>
   <id>CYGDAT_NET_SNMPAGENT_SYS_LOC</id>
   <description>This specifies the value returned for the sysLocation field of the System MIB (via the symbol SYS_LOC in the UCD sources) </description>
  </feature>
  <feature>
   <id>CYGDAT_NET_SNMPAGENT_VERS_DESC</id>
   <description>This specifies the value returned for the sysDescr field of the System MIB (via the symbol VERS_DESC in the UCD sources) </description>
  </feature>
  <feature>
   <id>CYGDAT_NET_SNMPAGENT_SYS_NAME</id>
   <description>This specifies the value returned for the sysName field of the System MIB (via the symbol SYS_NAME in the UCD sources) </description>
  </feature>
  <feature>
   <id>CYGPKG_SNMPAGENT_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the SNMP agent package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_SNMPAGENT_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the SNMP agent package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_SNMPAGENT_V3_SUPPORT</id>
   <description>Enabling this option includes SNMPv3 functionality as per the implementation in UCD-SNMP-4.1.2 </description>
  </feature>
  <feature>
   <id>CYGPKG_SNMPAGENT_TESTS</id>
   <description>This option specifies the set of tests for the eCos SMNP agent. </description>
  </feature>
  <feature>
   <id>CYGSEM_SNMPAGENT_TESTS_PROMISCUOUS</id>
   <description>This option controls the tests for the eCos SMNP agent. Enabling it will enable promiscuous mode on the hardware interface. </description>
  </feature>
  <feature>
   <id>CYGSEM_SNMPAGENT_TESTS_SNMPv3</id>
   <description>This option controls the tests for the eCos SMNP agent. Enabling it will include setup and testing of SNMP v3 interfaces. </description>
  </feature>
  <feature>
   <id>CYGNUM_SNMPAGENT_TESTS_ITERATIONS</id>
   <description>This option controls the number of times the basic test will be run for testing the eCos SMNP agent. </description>
  </feature>
  <feature>
   <id>CYGPKG_SNMPLIB</id>
   <description>SNMP protocol support library based on the UCD-SNMP project. </description>
  </feature>
  <feature>
   <id>CYGDBG_NET_SNMPLIB_DEBUG</id>
   <description>This option enables the debugging printout facilities of the UCD SNMP module, controlled by the global variable 'dodebug'. Setting this variable produces lots of printout for SNMP agent activity, often enough to make your SNMP client time out. </description>
  </feature>
  <feature>
   <id>CYGPKG_SNMPLIB_FILESYSTEM_SUPPORT</id>
   <description>This option enables file-system dependent functionality, eg snmp.conf </description>
  </feature>
  <feature>
   <id>CYGPKG_SNMPLIB_PERSISTENT_FILESYSTEM</id>
   <description>This option enables functions that would require a persistent file-system to be available. This would be required if a system needs to save backups of the snmpd.conf files. </description>
  </feature>
  <feature>
   <id>CYGPKG_SNMPLIB_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the SNMP library package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_SNMPLIB_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the SNMP library package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_HTTPD</id>
   <description>HTTP Daemon. This is an embedded HTTP server for use with applications in eCos.This server is specifically aimed at the remote control and monitoring requirements of embedded applications. For this reason the emphasis is on dynamically generated content, simple forms handling and a basic CGI interface. It is NOT intended to be a general purpose server for delivering arbitrary web content. </description>
  </feature>
  <feature>
   <id>CYGNUM_HTTPD_SERVER_PORT</id>
   <description>HTTP port to which browsers will connect. This defaults to the standard port 80, but may be changed to any other port number if required. </description>
  </feature>
  <feature>
   <id>CYGDAT_HTTPD_SERVER_ID</id>
   <description>This is the string that will be used as the server identifier in the HTTP header. </description>
  </feature>
  <feature>
   <id>CYGNUM_HTTPD_THREAD_COUNT</id>
   <description>The HTTP server can be configured to use more than one thread to service requests. This is useful if you expect to serve complex pages, or if you expect to have several simultaneous users. For most purposes, just one thread is perfectly adequate. </description>
  </feature>
  <feature>
   <id>CYGNUM_HTTPD_THREAD_PRIORITY</id>
   <description>The HTTP server threads can be run at any priority. The exact priority depends on the importance of the server relative to the rest of the system. The default is to put it in the middle of the priority range to provide reasonable response without impacting genuine high priority threads. </description>
  </feature>
  <feature>
   <id>CYGNUM_HTTPD_THREAD_STACK_SIZE</id>
   <description>This is the amount of stack to be allocated for each of the HTTPD threads. This quantity is in addition to the values of CYGNUM_HAL_STACK_SIZE_MINIMUM and CYGNUM_HTTPD_SERVER_BUFFER_SIZE. </description>
  </feature>
  <feature>
   <id>CYGNUM_HTTPD_SERVER_BUFFER_SIZE</id>
   <description>This defines the size of the buffer used to receive the first line of each HTTP request. If you expect to use particularly long URLs or have very complex forms, this should be increased. </description>
  </feature>
  <feature>
   <id>CYGNUM_HTTPD_SERVER_AUTO_START</id>
   <description>This option causes the HTTP Daemon to be started automatically during system initialization. If this option is not set then the application must start the daemon explicitly by calling cyg_httpd_startup(). </description>
  </feature>
  <feature>
   <id>CYGNUM_HTTPD_SERVER_DELAY</id>
   <description>This defines the number of system clock ticks that the HTTP server will wait before initializing itself and spawning any extra server threads. This is to give the application a chance to initialize properly without any interference from the HTTPD. </description>
  </feature>
  <feature>
   <id>CYGPKG_HTTPD_MONITOR</id>
   <description>This enables a simple system monitor that displays the status of an eCos system using a small number of HTML pages. </description>
  </feature>
  <feature>
   <id>CYGPKG_HTTPD_TESTS</id>
   <description>This option causes the building of a simple test server. </description>
  </feature>
  <feature>
   <id>CYGPKG_HTTPD_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the HTTP server package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_HTTPD_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the HTTP server package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FTPCLIENT</id>
   <description>FTP client support. Provides ftp_put and ftp_get to put a file onto a remote FTP server and get a file from a remote server. Only binary more is supported. </description>
  </feature>
  <feature>
   <id>CYGNUM_NET_FTPCLIENT_BUFSIZE</id>
   <description>The FTP data transfer functions buffer the data as it passes between systems. This option controls the size of that buffer, which will be allocated using 'malloc' </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FTPCLIENT_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the FTP client package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FTPCLIENT_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the FTP client package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_FTPCLIENT_TESTS</id>
   <description>This option specifies the set of tests for the ftpclient package. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP</id>
   <description>PPP support for eCos. This package contains the PPP daemon functionality, BSD kernel device drivers for the network stack, plus other parts of the PPP infrastructure. </description>
  </feature>
  <feature>
   <id>CYGNUM_PPP_PPPD_THREAD_PRIORITY</id>
   <description>The PPP system contains two threads, One is used for receiving data from the link and processing control packets. The other is used to transmit data asynchronously to the link when it cannot be completed synchronously. The receive thread runs at the priority given here, and the transmit thread runs at the next lower priority. The exact priority needed here depends on the importance of the PPP subsystem relative to the rest of the system. The default is to put it in the middle of the priority range to provide reasonable response without impacting genuine high priority threads. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_DEBUG_WARN_ONLY</id>
   <description>The runtime debug option enables logging of high level debug messages. Too many of these can interfere with the PPP device and may result in missed messages. This is because these messages are emitted via the diag_printf() mechanism, which disables interrupts while it prints. By default, therefore, we only report errors and warnings, and not all events. Setting this option to zero will enable the logging of all events. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_AUTH_DEFAULT_USER</id>
   <description>This option gives the default value for the user name used to intialize the user field in the PPP options. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_AUTH_DEFAULT_PASSWD</id>
   <description>This option gives the default value for the password used to intialize the passwd field in the PPP options. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_DEFAULT_DIALUP_NUMBER</id>
   <description>This option provides a default dialup number for use in chat scripts. This value is not used anywhere in the PPP package, but is provided to complete the information needed, alongside the user name and password, for accessing a typical dialup server. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_PAP</id>
   <description>This component enables the inclusion of PAP authentication support. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_CHAP</id>
   <description>This component enables the inclusion of CHAP authentication support. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_COMPRESSION</id>
   <description>This component provides control over PPP compression features. WARNING: at present there are problems with BSD and ZLIB, and the compression code needs to allocate large amounts of memory. Hence this is all currently disabled. </description>
  </feature>
  <feature>
   <id>PPP_BSDCOMP</id>
   <description>This option enables inclusion of BSD compression into the PPP protocol. </description>
  </feature>
  <feature>
   <id>PPP_DEFLATE</id>
   <description>This option enables inclusion of ZLIB compression into the PPP protocol. </description>
  </feature>
  <feature>
   <id>PPP_INHIBIT_OLD_VJ_COMPRESSION</id>
   <description>This option prevents the IPCP state machine from negotiating the pre-RFC1332 Van Jacobson compression. Checking this option could improve IPCP negotiation time at the expense of compatibility. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_CHAT</id>
   <description>This component enables the inclusion of a simple scripting system to bring up PPP connections. It implements a subset of the CHAT scripting language. </description>
  </feature>
  <feature>
   <id>CYGNUM_PPP_CHAT_ABORTS_MAX</id>
   <description>This option defines the maximum number of ABORT strings that the CHAT system will store. </description>
  </feature>
  <feature>
   <id>CYGNUM_PPP_CHAT_ABORTS_SIZE</id>
   <description>This option defines the maximum size of each ABORT strings that the CHAT system will store. </description>
  </feature>
  <feature>
   <id>CYGNUM_PPP_CHAT_STRING_LENGTH</id>
   <description>This option defines the maximum size of any expect or reply strings that the CHAT system will be given. </description>
  </feature>
  <feature>
   <id>CYGPKT_PPP_WORKAROUNDS_START_FLAG</id>
   <description>This option enables a workaround to add a start flag to every packet. The RFC does not require this, but some broken PPP implementations seem to need it. </description>
  </feature>
  <feature>
   <id>CYGOPT_PPP_NS_NEGOTIATE</id>
   <description>This option allows negotiation of the domain name server IPCP extensions as defined in RFC 1877 </description>
  </feature>
  <feature>
   <id>CYGOPT_PPP_DNS_CONFIGURE</id>
   <description>The PPP code can negotiate with the peer what the recommended DNS server is. This option causes the PPP code to then configure the DNS resolver with the address of the discovered server. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the PPP package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the PPP package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_TESTS</id>
   <description>This option specifies the set of tests for the PPP package. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_TESTS_ALL</id>
   <description>This option enables the inclusion of extra PPP tests that are not normally suitable for automated testing. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_TEST_DEVICE</id>
   <description>This is the name of the device used by the PPP tests to make the PPP connection. </description>
  </feature>
  <feature>
   <id>CYGPKG_PPP_TESTS_AUTOMATE</id>
   <description>This component controls the automation of PPP tests using the test_server.sh script to control the remote end. Without this option, PPP tests are configured to run stand-alone. With this option they emit control strings to change the line baud rate and announce the test being performed. </description>
  </feature>
  <feature>
   <id>CYGDAT_PPP_TEST_BAUD_RATES</id>
   <description>This option gives the set of baud rates for which some tests will execute. </description>
  </feature>
  <feature>
   <id>CYGPKG_NS_DNS_DEFAULT</id>
   <description>This option controls the use of a default, hard coded DNS server. When this is enabled, the IPv4 or IPv6 address in the CDL option CYGDAT_NS_DNS_DEFAULT_SERVER is used in init_all_network_interfaces() to start the resolver using the specified server. The DHCP client or user code may override this by restarting the resolver. </description>
  </feature>
  <feature>
   <id>CYGPKG_NS_DNS_DOMAINNAME</id>
   <description>This option controls the use of a default, hard coded domain name to be used when querying a DNS server. When this is enabled, the name in the CDL option CYGDAT_NS_DNS_DOMAINNAME_NAME is used in init_all_network_interfaces() to set the domain name as accessed by getdomainname(). </description>
  </feature>
  <feature>
   <id>CYGNUM_NS_DNS_GETADDRINFO_ADDRESSES</id>
   <description>This option controls the number of addresses the DNS client can return to getaddrinfo and hence the size of the buffer passed to the DNS client. </description>
  </feature>
  <feature>
   <id>CYGOPT_NS_DNS_FIRST_FAMILY</id>
   <description>This option controls the order DNS results will appear in the information returned by getaddrinfo. This will in turn control the order in which network clients try talking to servers, ie does it try IPv6 or IPv4 addresses first when it has both types of addresses. </description>
  </feature>
  <feature>
   <id>CYGPKG_NS_DNS_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the DNS package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_NS_DNS_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the DNS package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_NS_DNS_TESTS</id>
   <description>This option specifies the set of tests for the DNS package. </description>
  </feature>
  <feature>
   <id>CYGPKG_NS_DNS_TESTS_LUNN</id>
   <description>Run the tests against Andrew Lunn's DNS server. Servers come and go, IP addresses change, links are sometime down. So this may not work.... </description>
  </feature>
  <feature>
   <id>CYGPKG_NS_DNS_TESTS_ELSIS</id>
   <description>Run the tests against Iztok Zupet DNS server at Elsis. Servers come and go, IP addresses change, links are sometime down. So this may not work.... </description>
  </feature>
  <feature>
   <id>CYGPKG_CRC</id>
   <description>This package provides support for CRC calculation. Currently this is the POSIX 1003 defined CRC algorithm, a 32 CRC by Gary S. Brown, and a 16 bit CRC. </description>
  </feature>
  <feature>
   <id>CYGPKG_CPULOAD</id>
   <description>This package measures the CPU load over the last 100ms, 1second and 10 second. All loads are returned as a percentage, ie 0-100. This is only a rough measure. Any clever power management, sleep modes etc, will cause these results to be wrong. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_SNTP</id>
   <description>This package provides a SNTP client which can recieve broadcast time information and set the system clock. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_SNTP_UNICAST</id>
   <description>This option enables SNTP unicast mode in for the SNTP client. This mode will send SNTP requests to NTP/SNTP servers in addition to listening for SNTP broadcasts. </description>
  </feature>
  <feature>
   <id>CYGNUM_NET_SNTP_UNICAST_MAXDHCP</id>
   <description>This option specifies the maximum number of NTP servers to get from DHCP. These servers are used to configure the unicast SNTP client. Disabling this option disables DHCP usage. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_SNTP_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the SNTP package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_NET_SNTP_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the SNTP package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FLASH</id>
   <description>This package provides support for the flash devices on the current platform. </description>
  </feature>
  <feature>
   <id>CYGHWR_IO_FLASH_DEVICE</id>
   <description>This calculated option gives the number of flash devices on the current platform. The generic flash support requires at least one device. </description>
  </feature>
  <feature>
   <id>CYGHWR_IO_FLASH_BLOCK_LOCKING</id>
   <description>This option will be enabled by devices which can support locking (write-protection) of individual flash blocks. If none of the devices support locking then the relevant code in the generic flash package can be eliminated. </description>
  </feature>
  <feature>
   <id>CYGHWR_IO_FLASH_INDIRECT_READS</id>
   <description>Some flash devices can be read directly like any other memory. Others can only be accessed indirectly, which involves extra code. If none of the flash devices on the target hardware use indirect reads then the extra code can be eliminated. </description>
  </feature>
  <feature>
   <id>CYGHWR_IO_FLASH_DEVICE_NEEDS_CACHE_HANDLED</id>
   <description>Managing flash often requires interacting with the cache. Some device drivers do not require the generic flash code to manipulate the cache, either because they do it themselves or because the hardware does the right thing. Other drivers require the generic code to disable/enable the cache before calling into the driver. </description>
  </feature>
  <feature>
   <id>CYGHWR_IO_FLASH_DEVICE_LEGACY</id>
   <description>The generic flash code can work with either a legacy device driver or with V2 drivers. If a legacy driver is used on the current platform then this option will be implemented. </description>
  </feature>
  <feature>
   <id>CYGSEM_IO_FLASH_READ_INDIRECT</id>
   <description>This option will be asserted by devices which cannot support direct access to the FLASH memory contents (e.g. EEPROM or NAND devices). In these cases, the driver must provide an appropriate hardware access function. </description>
  </feature>
  <feature>
   <id>CYGSEM_IO_FLASH_CHATTER</id>
   <description>Selecting this option will cause the flash code to print status messages as various flash operations are undertaken. </description>
  </feature>
  <feature>
   <id>CYGSEM_IO_FLASH_VERIFY_PROGRAM</id>
   <description>Selecting this option will cause verification of data programmed to flash. </description>
  </feature>
  <feature>
   <id>CYGSEM_IO_FLASH_SOFT_WRITE_PROTECT</id>
   <description>Selecting this option will cause the state of a hardware jumper or dipswitch to be read by software to determine whether the flash is write-protected or not. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FLASH_BLOCK_DEVICE</id>
   <description>Provide one or more block devices below /dev which can be accessed using standard I/O functions such as eCos cyg_io_read() and POSIX open(). </description>
  </feature>
  <feature>
   <id>CYGINT_IO_FLASH_BLOCK_DEVICE_METHODS</id>
   <description>This interface counts the number of ways Flash can be referenced in order to be opened. This is so that the configuration can ensure that at least one method is available. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_DEVICES</id>
   <description>The number of simultaneously open flash devices permitted. This is statically configured, rather than dynamically allocated at run-time as it is likely the number required will be small. </description>
  </feature>
  <feature>
   <id>CYGFUN_IO_FLASH_BLOCK_FROM_FIS</id>
   <description>This method of access to Flash regions uses the names of FIS regions to identify the Flash device, or portion of the device. For example /dev/flash/fis/jffs2. </description>
  </feature>
  <feature>
   <id>CYGFUN_IO_FLASH_BLOCK_FROM_DEVOFFSET</id>
   <description>This method of access to Flash regions uses the Flash device number, along with an offset (which may be 0 to indicate the start of the device) and an optional length which will otherwise be assumed to be the whole device. For example /dev/flash/0/0x1000 or /dev/flash/1/0,65536. </description>
  </feature>
  <feature>
   <id>CYGSEM_IO_FLASH_LEGACY_API</id>
   <description>Provide an implementation of the lagacy user API. This is mapped onto the new API via a small layer of code </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FLASH_BLOCK_DEVICE_LEGACY</id>
   <description>Provide one or more block devices below /dev which can be accessed using standard I/O functions such as eCos cyg_io_read() and POSIX open(). This format of configuration is deprecated, but is included for compatibility with older configurations. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FLASH_BLOCK_DEVICE_1</id>
   <description>Provide block device 1 for use with standard I/O </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_FLASH_BLOCK_DEVICE_NAME_1</id>
   <description>This option determines the name by which the block device can be accessed. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_CFG_STATIC_1</id>
   <description>This configures the flash block device 1 with static offset from the base of the first flash device and length </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_OFFSET_1</id>
   <description>This gives the offset from the base of flash of the first flash device which this block device corresponds to. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_LENGTH_1</id>
   <description>This gives the length of the region of flash given over to this block device. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_CFG_STATIC_ABSOLUTE_1</id>
   <description>This configures the flash block device 1 with absolute base address and a length </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_ABSOLUTE_START_1</id>
   <description>This gives the absolute address in flash which this block device corresponds to. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_ABSOLUTE_LENGTH_1</id>
   <description>This gives the length of the region of flash given over to this block device. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_CFG_FIS_1</id>
   <description>This configures the flash block device 1 from Redboot FIS </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FLASH_BLOCK_DEVICE_2</id>
   <description>Provide block device 2 for use with standard I/O </description>
  </feature>
  <feature>
   <id>CYGDAT_IO_FLASH_BLOCK_DEVICE_NAME_2</id>
   <description>This option determines the name by which the block device can be accessed. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_CFG_STATIC_2</id>
   <description>This configures the flash block device 2 with static offset from the base of the first flash device and length </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_OFFSET_2</id>
   <description>This gives the offset from the base of flash of the first flash device which this block device corresponds to. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_LENGTH_2</id>
   <description>This gives the length of the region of flash given over to this block device. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_CFG_STATIC_ABSOLUTE_2</id>
   <description>This configures the flash block device 2 with absolute base address and a length </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_ABSOLUTE_START_2</id>
   <description>This gives the absolute address in flash which this block device corresponds to. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_ABSOLUTE_LENGTH_2</id>
   <description>This gives the length of the region of flash given over to this block device. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_BLOCK_CFG_FIS_2</id>
   <description>This configures the flash block device 2 from Redboot FIS </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FLASH_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FLASH_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the flash device drivers. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FLASH_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the flash device drivers. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_FLASH_TESTS</id>
   <description>This option specifies the set of tests for the flash device drivers. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_TEST_OFFSET</id>
   <description>This gives the offset from the base of flash where tests can be run. It is important to set this correctly, as an incorrect value could allow the tests to write over critical portions of the FLASH device and possibly render the target board totally non-functional. </description>
  </feature>
  <feature>
   <id>CYGNUM_IO_FLASH_TEST_LENGTH</id>
   <description>This gives the length of the region of flash used for testing. </description>
  </feature>
  <feature>
   <id>CYGPKG_DEVS_FLASH_STRATA</id>
   <description>FLASH memory device support for Intel StrataFlash </description>
  </feature>
  <feature>
   <id>CYGNUM_DEVS_FLASH_STRATA_MAX_BLOCKS</id>
   <description>The strata devices do not support unlocking an individual block. Instead it is necassary to unlock all the blocks in one operation and then lock all those blocks that should be blocked. To do this we need an array containing the current status of the blocks. This controls the size of that array. </description>
  </feature>
  <feature>
   <id>CYGINT_FS_RAM_ALLOC</id>
   <description>This interface is implemented by functions which allocate RAM to hold the contents of the files </description>
  </feature>
  <feature>
   <id>CYGNUM_RAMFS_REALLOC_INCREMENT</id>
   <description>This option controls the size of the increment to a file data storage block. </description>
  </feature>
  <feature>
   <id>CYGNUM_RAMFS_BLOCK_SIZE</id>
   <description>This option controls the size of a data storage block. </description>
  </feature>
  <feature>
   <id>CYGNUM_RAMFS_BLOCKS_DIRECT</id>
   <description>This option controls the number of data storage blocks that are referenced directly from a file or directory node. </description>
  </feature>
  <feature>
   <id>CYGNUM_RAMFS_BLOCKS_INDIRECT1</id>
   <description>This option controls the number of single level indirect storage blocks that are referenced from a file or directory node. </description>
  </feature>
  <feature>
   <id>CYGNUM_RAMFS_BLOCKS_INDIRECT2</id>
   <description>This option controls the number of two level indirect storage blocks that are referenced from a file or directory node. </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_RAM_BLOCKS_ARRAY</id>
   <description>This option controls whether the blocks are allocated from an array of blocks rather from the heap using malloc(). </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_RAM_BLOCKS_ARRAY_EXTERN</id>
   <description>This option controls whether the block array is defined by the RAMFS package or whether it is provided by an external component. The latter option may be useful when the RAM file system is to be put into a special memory area. </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_RAM_BLOCKS_ARRAY_NAME</id>
   <description>This option controls what the symbol name of the external block array will be. </description>
  </feature>
  <feature>
   <id>CYGNUM_FS_RAM_BLOCKS_ARRAY_SIZE</id>
   <description>The number of blocks in the array. The total size of the array will be this value times the block size. </description>
  </feature>
  <feature>
   <id>CYGNUM_RAMFS_DIRENT_SIZE</id>
   <description>This option controls the number of two level indirect storage blocks that are referenced from a file or directory node. </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_RAM_RET_DIRENT_DTYPE</id>
   <description>This option controls whether the RAM filesystem supports setting fileio's struct dirent d_type field. If this option is enabled, d_type will be set. Otherwise, nothing will be done, d_type's value will be zero because fileio already sets it. </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_RAM_TESTS</id>
   <description>This option specifies the set of tests for the RAM FS package. </description>
  </feature>
  <feature>
   <id>CYGBLD_FS_ROMFS_MK_ROMFS</id>
   <description>When enabled this option will build a host tool which can be used to create a rom filesystem image. </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_ROM_RET_DIRENT_DTYPE</id>
   <description>This option controls whether the ROM filesystem supports setting fileio's struct dirent d_type field. If this option is enabled, d_type will be set. Otherwise, nothing will be done, d_type's value will be zero because fileio already sets it. </description>
  </feature>
  <feature>
   <id>CYGTST_ROMFS_BUILD_TESTS</id>
   <description>This option enables the building of the ROM filesystem tests. </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_ROM_TESTS</id>
   <description>This option specifies the set of tests for the ROM filesystem package. </description>
  </feature>
  <feature>
   <id>CYGOPT_FS_JFFS2_GCTHREAD</id>
   <description>Enable background garbage collection thread, for making free space ahead of time. Leave this off till it's been implemented. And don't implement it till icache locking has been made thread-safe. </description>
  </feature>
  <feature>
   <id>CYGNUM_JFFS2_GC_THREAD_PRIORITY</id>
   <description>The jffs2 system contains one garbage collect thread. </description>
  </feature>
  <feature>
   <id>CYGNUM_JFFS2_GC_THREAD_STACK_SIZE</id>
   <description>This option sets the size of the stack used for jffs2 garbage collect thread </description>
  </feature>
  <feature>
   <id>CYGNUM_JFFS2_GS_THREAD_TICKS</id>
   <description>This option sets how many clock ticks there will be between each garbage collect operation triggered by the background thread </description>
  </feature>
  <feature>
   <id>CYGOPT_FS_JFFS2_WRITE</id>
   <description>Enable writing to JFFS2 file systems; not only reading. </description>
  </feature>
  <feature>
   <id>CYGOPT_FS_JFFS2_NAND</id>
   <description>Enable support for JFFS2 on NAND flash. </description>
  </feature>
  <feature>
   <id>CYGOPT_FS_JFFS2_DEBUG</id>
   <description>Debug verbosity of JFFS2 code. Zero is normal operation without debugging. Level 1 adds extra sanity checks and fairly verbose output. Level 2 is insanely loquacious. </description>
  </feature>
  <feature>
   <id>CYGOPT_FS_JFFS2_COMPRESS</id>
   <description>Compression and decompression are entirely handled by the file system and are fully transparent to applications. However, selecting this option increases the amount of RAM required and slows down read and write operations considerably if you have a slow CPU. </description>
  </feature>
  <feature>
   <id>CYGOPT_FS_JFFS2_COMPRESS_ZLIB</id>
   <description>Use zlib for compression of data. This is the slowest of the compression options available but the most effective. </description>
  </feature>
  <feature>
   <id>CYGOPT_FS_JFFS2_COMPRESS_RTIME</id>
   <description>Use the rtime algorithm for compression of data. This simple algorithm often manages to squeeze and extra few bytes from data already compressed with gzip. </description>
  </feature>
  <feature>
   <id>CYGOPT_FS_JFFS2_COMPRESS_RUBIN</id>
   <description>Use the rubin algorithm for compression of data. This simple algorithm is faster than zlib but not quite as effective. </description>
  </feature>
  <feature>
   <id>CYGOPT_FS_JFFS2_COMPRESS_CMODE</id>
   <description>You can set here the default compression mode of JFFS2 from the avaiable compression modes. NONE causes no compression to be performed. PRIORITY tries the compressors in a predefined order and chooses the first successfull one. SIZE tries all compressors and chooses the one which has the smallest result </description>
  </feature>
  <feature>
   <id>CYGNUM_FS_JFFS2_RAW_NODE_REF_CACHE_POOL_SIZE</id>
   <description>In order to manage data stored in flash, the file system needs to use data structures (jffs2_raw_node_ref) allocated in RAM. You can specify here the maximum number of such structures you expect to be used, which will then be allocated statically. If this option is set to 0, the structures will be allocated dynamically via malloc(), which may incur some memory overhead depending on the particular malloc() implementation used. </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_JFFS2_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the JFFS2 package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_JFFS2_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the JFFS2 package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_JFFS2_RET_DIRENT_DTYPE</id>
   <description>This option controls whether the JFFS2 filesystem supports setting fileio's struct dirent d_type field. If this option is enabled, d_type will be set. Otherwise, nothing will be done, d_type's value will be zero because fileio already sets it. </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_JFFS2_TESTS</id>
   <description>This option specifies the set of tests for the JFFS2 FS package. </description>
  </feature>
  <feature>
   <id>CYGPKG_LINUX_COMPAT</id>
   <description>eCos supports a basic Linux compatibility Layer providing various functions, equivalents or stubs expected by Linux kernel code, for assistance in porting drivers and file system code from Linux. Note this does not provide Linux compatibility to applications. </description>
  </feature>
  <feature>
   <id>CYGNUM_LINUX_COMPAT_PAGE_SIZE_EXPONENT</id>
   <description>Define the page size. The value entered here is used as an exponent X in the expression 2^^X to ensure that the page size is always an integer power of two. </description>
  </feature>
  <feature>
   <id>CYGPKG_COMPRESS_ZLIB</id>
   <description>This package provides support for compression and decompression. </description>
  </feature>
  <feature>
   <id>CYGSEM_COMPRESS_ZLIB_DEFLATE_MAKES_GZIP</id>
   <description>If this option is set then the output of calling deflate() will be wrapped up as a 'gzip' compatible file. </description>
  </feature>
  <feature>
   <id>CYGSEM_COMPRESS_ZLIB_NEEDS_MALLOC</id>
   <description>This pseudo-option will force the memalloc library to be required iff the application does not provide it's own infrastructure. </description>
  </feature>
  <feature>
   <id>CYGFUN_COMPRESS_ZLIB_GZIO</id>
   <description>This option enables the stdio-like zlib utility functions (gzread/gzwrite and friends) provided in gzio.c. </description>
  </feature>
  <feature>
   <id>CYGPKG_COMPRESS_ZLIB_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_COMPRESS_ZLIB_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building this package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_COMPRESS_ZLIB_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building this package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_COMPRESS_ZLIB_LDFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building this package. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_COMPRESS_ZLIB_LDFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building this package. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGPKG_VNC_SERVER</id>
   <description>VNC Server. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_PORT</id>
   <description>Port VNC server will listen on for client connection. This defaults to the standard port 5900, but may be changed to any other port number if required. </description>
  </feature>
  <feature>
   <id>CYGDAT_VNC_DESKTOP_NAME</id>
   <description>This is the string that will be sent to the client in the ServerInitialisation message as the desktop name. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_DELAY</id>
   <description>This defines the number of system clock ticks that the VNC server will wait before initializing itself and spawning any extra server threads. This is to give the application a chance to initialize properly without any interference from the VNC server. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_PRIORITY</id>
   <description>This sets the priority of the VNC server threads. The default priority is 1 above the lowest priority. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_USE_CORRE_ENCODING</id>
   <description>This option causes the VNC server to use CoRRE encoding on the display data it sends to the client (vncviewer program). If an encoded data packet works out larger than the RAW data packet, then that packet is sent as raw data anyway. If this option is not selected, or the client does not support CoRRE encoding, then the display data is sent as raw data. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_CORRE_ENCODING_HACK</id>
   <description>Some versions of the vncviewer program have a bug where they don't display the background colour when CoRRE encoding is used. This option adds a workaround to this bug to the VNC server. Note, this problem is not seen with the TightVNC viewer. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_FRAME_WIDTH</id>
   <description>This sets the width of the VNC server frame buffer. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_FRAME_HEIGHT</id>
   <description>This sets the height of the VNC server frame buffer. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_TILE_SIZE</id>
   <description>This sets the size of the tile for the VNC server. The VNC frame is split into tiles and frame updates to the client are always multiples of whole tiles. Note that these tiles are not the same as the tiles used with Hextile encoding. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_PIXEL_RGB332</id>
   <description>This selects 8-bit, RGB332 pixel format. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_PIXEL_BGR233</id>
   <description>This selects 8-bit, BGR233 pixel format. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_PIXEL_RGB555</id>
   <description>This selects 16-bit, RGB555 pixel format. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_PIXEL_RGB565</id>
   <description>This selects 16-bit, RGB565 pixel format. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_PIXEL_TRUECOLOR0888</id>
   <description>This selects 32-bit, TRUECOLOR0888 pixel format. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_INCLUDE_VNC_PRINTF</id>
   <description>If this option is selected, the VNC server will include the VncPrintf function for writing text to the VNC server frame buffer. This function is not available if the MicroWindows package is also included. </description>
  </feature>
  <feature>
   <id>CYGPKG_VNC_SERVER_BUILD_MOUSE_DRIVER</id>
   <description>If this option is selected, the VNC mouse driver will be built. If not selected, all mouse data from the VNC client will be quietly ignored. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_MOUSE_EVENTS</id>
   <description>This option specifies how many mouse events the mouse driver can hold before it overflows. </description>
  </feature>
  <feature>
   <id>CYGDAT_VNC_SERVER_MOUSE_NAME</id>
   <description>This option sets the device name for the VNC server mouse. </description>
  </feature>
  <feature>
   <id>CYGPKG_VNC_SERVER_BUILD_KEYBOARD_DRIVER</id>
   <description>If this option is selected, the VNC keyboard driver will be built. If not selected, all keyboard data from the VNC client will be quietly ignored. </description>
  </feature>
  <feature>
   <id>CYGNUM_VNC_SERVER_KEYBOARD_EVENTS</id>
   <description>This option specifies how many keystroke events the keyboard driver can hold before it overflows. </description>
  </feature>
  <feature>
   <id>CYGDAT_VNC_SERVER_KEYBOARD_NAME</id>
   <description>This option sets the device name for the VNC server keyboard. </description>
  </feature>
  <feature>
   <id>CYGPKG_VNC_SERVER_TESTS</id>
   <description>This option specifies the set of tests for the VNC server package. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_DISK</id>
   <description>This option enables drivers for basic I/O services on disk devices. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_DISK_DEVICES</id>
   <description>This option enables the hardware disk drivers for the current platform. </description>
  </feature>
  <feature>
   <id>CYGDBG_IO_DISK_DEBUG</id>
   <description>This option enables debugging information from the disk driver package. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_DISK_OPTIONS</id>
   <description>Package specific build options including control over compiler flags used only in building this package, and details of which tests are built. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_DISK_CFLAGS_ADD</id>
   <description>This option modifies the set of compiler flags for building the disk device drivers. These flags are used in addition to the set of global flags. </description>
  </feature>
  <feature>
   <id>CYGPKG_IO_DISK_CFLAGS_REMOVE</id>
   <description>This option modifies the set of compiler flags for building the disk device drivers. These flags are removed from the set of global flags if present. </description>
  </feature>
  <feature>
   <id>CYGIMP_BLOCK_LIB_STATISTICS</id>
   <description>This option enables statistics for block access operations. </description>
  </feature>
  <feature>
   <id>CYGNUM_FS_FAT_NODE_HASH_TABLE_SIZE</id>
   <description>This option controls the number of slots in the hash table used to store file nodes using filenames as keys. </description>
  </feature>
  <feature>
   <id>CYGNUM_FS_FAT_NODE_POOL_SIZE</id>
   <description>This option controls the size of the node pool used for storing file nodes. This value should be set to the maximum required number of simultaneously open files plus the desired size of unused node cache. </description>
  </feature>
  <feature>
   <id>CYGNUM_FS_FAT_BLOCK_CACHE_MEMSIZE</id>
   <description>This option controls the amount of memory used for the block cache. </description>
  </feature>
  <feature>
   <id>CYGDBG_FS_FAT_NODE_CACHE_EXTRA_CHECKS</id>
   <description>This option controls the inclusion of extra sanity checks in node cache code. </description>
  </feature>
  <feature>
   <id>CYGCFG_FS_FAT_USE_ATTRIBUTES</id>
   <description>This option controls if the FAT filesystem supports or honors the FAT filesystem file attributes. </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_FAT_RET_DIRENT_DTYPE</id>
   <description>This option controls whether the FAT filesystem supports setting fileio's struct dirent d_type field. If this option is enabled, d_type will be set. </description>
  </feature>
  <feature>
   <id>CYGPKG_FS_FAT_TESTS</id>
   <description>This option specifies the set of tests for the FAT FS package. </description>
  </feature>
</features>